
@inproceedings{matas_invited_2020,
	address = {New York, NY, USA},
	series = {{FPGA} '20},
	title = {Invited {Tutorial}: {FPGA} {Hardware} {Security} for {Datacenters} and {Beyond}},
	isbn = {978-1-4503-7099-8},
	shorttitle = {Invited {Tutorial}},
	url = {https://doi.org/10.1145/3373087.3375390},
	doi = {10.1145/3373087.3375390},
	abstract = {Since FPGAs are now available in datacenters to accelerate applications, providing FPGA hardware security is a high priority. FPGA security is becoming more serious with the transition to FPGA-as-a-Service where users can upload their own bitstreams. Full control over FPGA hardware through the bitstream enables attacks to weaken an FPGA-based system. These include physically damaging the FPGA equipment and leaking of sensitive information such as the secret keys of crypto algorithms. While there is no known attacks in the commercial settings so far, it is not so much a question of if but more of when? The tutorial will show concrete attacks applicable on datacenter FPGAs. The goal of this tutorial is to prepare the FPGA community to impending security issues in order to pave way for a proactive security. First, we will give a tour through the FPGA hardware security jungle surveying practical attacks and potential threats. We will reinforce this with live demos of denial of service attacks. Less than 10\% of the logic resources on an FPGA can draw enough dynamic power to crash a datacenter FPGA card. In the second part of the tutorial, we will show different mitigations that are either vendor supported or proposed by the academic community. In summary, the tutorial will communicate that while FPGA hardware security is complicated to bring about, there are acceptable solutions for known FPGA security problems.},
	urldate = {2021-03-19},
	booktitle = {Proceedings of the 2020 {ACM}/{SIGDA} {International} {Symposium} on {Field}-{Programmable} {Gate} {Arrays}},
	publisher = {Association for Computing Machinery},
	author = {Matas, Kaspar and La, Tuan and Grunchevski, Nikola and Pham, Khoa and Koch, Dirk},
	month = feb,
	year = {2020},
	keywords = {cloud computing, datacenter, fpga security, hardware security},
	pages = {11--20},
	file = {Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\EJJAMA5V\\Matas et al. - 2020 - Invited Tutorial FPGA Hardware Security for Datac.pdf:application/pdf},
}

@misc{noauthor_xc7z020-2clg484i_nodate,
	title = {{XC7Z020}-{2CLG484I} {Xilinx} {Inc}. {\textbar} {Integrated} {Circuits} ({ICs}) {\textbar} {DigiKey}},
	url = {https://www.digikey.com/en/products/detail/xilinx-inc/XC7Z020-2CLG484I/3925763},
	urldate = {2020-12-17},
	file = {XC7Z020-2CLG484I Xilinx Inc. | Integrated Circuits (ICs) | DigiKey:C\:\\Users\\sgdon\\Zotero\\storage\\VAUE8WX9\\3925763.html:text/html},
}

@article{turan_trust_2020,
	title = {Trust in {FPGA} {Accelerated} {Cloud} {Computing}},
	volume = {1},
	abstract = {FURKAN TURAN and INGRID VERBAUWHEDE, imec-COSIC, KU Leuven, Belgium Platforms combining CPUs with FPGAs have become popular as they promise high performance with energy efficiency. This is the result of the combination of FPGA accelerators tuned to the application, with the CPU providing the programming flexibility. Unfortunately, the security of these new platforms has received little attention: the classic software security assumption that hardware is immutable no longer holds. It is expected that attack surfaces will expand and threats will evolve, hence the trust models, and security solutions should be prepared. The attacker model should be enhanced and consider the following three basic entities as the source of threats: applications run by users, accelerators designed by third-party developers and the cloud service providers enabling the computation on their platforms. In our work, we review current trust models and existing security assumptions, and point out their shortcomings. We survey existing research that target secure remote FPGA configuration, the protection of intellectual property, and secure shared use of FPGAs. When combined, these are the foundations to build a solution for secure use of FPGAs in the cloud. In addition to analysing the existing research, we provide discussions on how to improve it, and disclose various concerns that have not been addressed yet. CCS Concepts: • Computer systems organization → Reconfigurable computing; • Security and privacy → Domain-specific security and privacy architectures.},
	language = {en},
	number = {1},
	journal = {ACM Comput. Surv.},
	author = {Turan, Furkan and Verbauwhede, Ingrid},
	year = {2020},
	pages = {28},
	file = {Turan and Verbauwhede - Trust in FPGA Accelerated Cloud Computing.pdf:C\:\\Users\\sgdon\\Zotero\\storage\\SVY7P6SD\\SVY7P6SD.pdf:application/pdf},
}

@article{jin_security_2020,
	title = {Security of {Cloud} {FPGAs}: {A} {Survey}},
	shorttitle = {Security of {Cloud} {FPGAs}},
	url = {http://arxiv.org/abs/2005.04867},
	abstract = {Integrating Field Programmable Gate Arrays (FPGAs) with cloud computing instances is a rapidly emerging trend on commercial cloud computing platforms such as Amazon Web Services (AWS), Huawei cloud, and Alibaba cloud. Cloud FPGAs allow cloud users to build hardware accelerators to speed up the computation in the cloud. However, since the cloud FPGA technology is still in its infancy, the security implications of this integration of FPGAs in the cloud are not clear. In this paper, we survey the emerging field of cloud FPGA security, providing a comprehensive overview of the security issues related to cloud FPGAs, and highlighting future challenges in this research area.},
	urldate = {2020-11-27},
	journal = {arXiv:2005.04867 [cs]},
	author = {Jin, Chenglu and Gohil, Vasudev and Karri, Ramesh and Rajendran, Jeyavijayan},
	month = may,
	year = {2020},
	note = {arXiv: 2005.04867},
	keywords = {Computer Science - Cryptography and Security},
	file = {arXiv Fulltext PDF:C\:\\Users\\sgdon\\Zotero\\storage\\BAXESMEX\\BAXESMEX.pdf:application/pdf;arXiv.org Snapshot:C\:\\Users\\sgdon\\Zotero\\storage\\EGYVNT5G\\2005.html:text/html},
}

@inproceedings{tian_fingerprinting_2020,
	address = {Seaside CA USA},
	title = {Fingerprinting {Cloud} {FPGA} {Infrastructures}},
	isbn = {978-1-4503-7099-8},
	url = {https://dl.acm.org/doi/10.1145/3373087.3375322},
	doi = {10.1145/3373087.3375322},
	abstract = {In recent years, multiple public cloud FPGA providers have emerged, increasing interest in FPGA acceleration of cryptographic, bioinformatic, financial, and machine learning algorithms. To help understand the security of the cloud FPGA infrastructures, this paper focuses on a fundamental question of understanding what an adversary can learn about the cloud FPGA infrastructure itself, without attacking it or damaging it. In particular, this work explores how unique features of FPGAs can be exploited to instantiate Physical Unclonable Functions (PUFs) that can distinguish between otherwise-identical FPGA boards. This paper specifically introduces the first method for identifying cloud FPGA instances by extracting a unique and stable FPGA fingerprint based on PUFs measured from the FPGA boards’ DRAM modules. Experiments conducted on the Amazon Web Services (AWS) cloud reveal the probability of renting the same physical board more than once. Moreover, the experimental results show that hardware is not shared among f1.2xlarge, f1.4xlarge, and f1.16xlarge instance types. As the approach used does not violate any restrictions currently placed by Amazon, this paper also presents a set of defense mechanisms that can be added to existing countermeasures to mitigate users’ attempts to fingerprint cloud FPGA infrastructures.},
	language = {en},
	urldate = {2020-11-27},
	booktitle = {Proceedings of the 2020 {ACM}/{SIGDA} {International} {Symposium} on {Field}-{Programmable} {Gate} {Arrays}},
	publisher = {ACM},
	author = {Tian, Shanquan and Xiong, Wenjie and Giechaskiel, Ilias and Rasmussen, Kasper and Szefer, Jakub},
	month = feb,
	year = {2020},
	pages = {58--64},
	file = {Tian et al. - 2020 - Fingerprinting Cloud FPGA Infrastructures.pdf:C\:\\Users\\sgdon\\Zotero\\storage\\W6QJVJX9\\Tian et al. - 2020 - Fingerprinting Cloud FPGA Infrastructures.pdf:application/pdf},
}

@article{liu_security_2020,
	title = {Security in {Approximate} {Computing} and {Approximate} {Computing} for {Security}: {Challenges} and {Opportunities}},
	volume = {108},
	issn = {1558-2256},
	shorttitle = {Security in {Approximate} {Computing} and {Approximate} {Computing} for {Security}},
	doi = {10.1109/JPROC.2020.3030121},
	abstract = {Approximate computing is an advanced computational technique that trades the accuracy of computation results for better utilization of system resources. It has emerged as a new preferable paradigm over traditional computing architectures for many applications where inaccurate results are acceptable. However, approximate computing also introduces security vulnerabilities mainly due to the fact that the uncertain and unpredictable intrinsic errors during approximate execution may be indistinguishable from malicious modification of the input data, the execution process, and the results. On the other hand, interestingly, approximate computing presents new opportunities to secure the system and the computation. Existing work on the security of approximate computing covers threat models, countermeasures, and evaluations but lacks a framework for analysis and comparison. In this article, we provide a classification of the state-of-the-art works in this research field, including threat models in approximate computing and promising security approaches using approximate computing. Open questions and potential future research directions are also discussed.},
	number = {12},
	journal = {Proceedings of the IEEE},
	author = {Liu, W. and Gu, C. and O’Neill, M. and Qu, G. and Montuschi, P. and Lombardi, F.},
	month = dec,
	year = {2020},
	note = {Conference Name: Proceedings of the IEEE},
	keywords = {Hardware, Security, hardware security, Approximate computing, cryptography, Cryptography, Power demand, System performance},
	pages = {2214--2231},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\R47VJHNW\\9244148.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\8CEKEVGE\\Liu et al. - 2020 - Security in Approximate Computing and Approximate .pdf:application/pdf},
}

@inproceedings{duncan_fpga_2019,
	title = {{FPGA} {Bitstream} {Security}: {A} {Day} in the {Life}},
	shorttitle = {{FPGA} {Bitstream} {Security}},
	doi = {10.1109/ITC44170.2019.9000145},
	abstract = {Security concerns for field-programmable gate array (FPGA) applications and hardware are evolving as FPGA designs grow in complexity, involve sophisticated intellectual properties (IPs), and pass through more entities in the design and implementation flow. FPGAs are now routinely found integrated into system-on-chip (SoC) platforms, cloud-based shared computing resources, and in commercial and government systems. The IPs included in FPGAs are sourced from multiple origins and passed through numerous entities (such as design house, system integrator, and users) through the lifecycle. This paper thoroughly examines the interaction of these entities from the perspective of the bitstream file responsible for the actual hardware configuration of the FPGA. Five stages of the bitstream lifecycle are introduced to analyze this interaction: 1) bitstream-generation, 2) bitstream-at-rest, 3) bitstream-loading, 4) bitstream-running, and 5) bitstream-end-of-life. Potential threats and vulnerabilities are discussed at each stage, and both vendor-offered and academic countermeasures are highlighted for a robust and comprehensive security assurance.},
	booktitle = {2019 {IEEE} {International} {Test} {Conference} ({ITC})},
	author = {Duncan, A. and Rahman, F. and Lukefahr, A. and Farahmandi, F. and Tehranipoor, M.},
	month = nov,
	year = {2019},
	note = {ISSN: 2378-2250},
	keywords = {security, bitstream file, bitstream lifecycle, Bitstream Protection, Encryption, field programmable gate arrays, FPGA bitstream security, FPGA designs, FPGA Security, industrial property, intellectual properties, IPs, reconfigurable architectures, security concerns, SoC platform, system integrator, system-on-chip, system-on-chip platforms},
	pages = {1--10},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\KAD7Z4W3\\9000145.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\LNGD94W9\\Duncan et al. - 2019 - FPGA Bitstream Security A Day in the Life.pdf:application/pdf},
}

@inproceedings{khan_secure_2020,
	title = {A {Secure} {Framework} with {Remote} {Configuration} of {Intellectual} {Property}},
	isbn = {978-989-758-359-9},
	url = {https://www.scitepress.org/Link.aspx?doi=10.5220/0007576305640571},
	abstract = {Digital Library},
	urldate = {2020-11-12},
	author = {Khan, Nadir and Nitzsche, Sven and Becker, Jürgen},
	month = nov,
	year = {2020},
	pages = {564--571},
	file = {Snapshot:C\:\\Users\\sgdon\\Zotero\\storage\\WHPV4XFN\\Link.html:text/html},
}

@inproceedings{ender_unpatchable_2020,
	title = {The {Unpatchable} {Silicon}: {A} {Full} {Break} of the {Bitstream} {Encryption} of {Xilinx} 7-{Series} {FPGAs}},
	isbn = {978-1-939133-17-5},
	shorttitle = {The {Unpatchable} {Silicon}},
	url = {https://www.usenix.org/conference/usenixsecurity20/presentation/ender},
	language = {en},
	urldate = {2020-11-12},
	booktitle = {29th \{{USENIX}\} {Security} {Symposium} (\{{USENIX}\} {Security} 20)},
	author = {Ender, Maik and Moradi, Amir and Paar, Christof},
	year = {2020},
	pages = {1803--1819},
	file = {Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\WTU3JL7D\\Ender et al. - 2020 - The Unpatchable Silicon A Full Break of the Bitst.pdf:application/pdf;Snapshot:C\:\\Users\\sgdon\\Zotero\\storage\\TTKVDCLQ\\ender.html:text/html},
}

@inproceedings{jacob_securing_2017,
	title = {Securing {FPGA} {SoC} configurations independent of their manufacturers},
	doi = {10.1109/SOCC.2017.8226019},
	abstract = {System-on-Chips which include FPGAs are important platforms for critical applications since they provide significant software performance through multi-core CPUs as well as high versatility through integrated FPGAs. Those integrated FP-GAs allow to update the programmable hardware functionality, e.g. to include new communication interfaces or to update cryptographic accelerators during the life-time of devices. Updating software as well as hardware configuration is required for critical applications such as e.g. industrial control devices or vehicles with long life-times. Such updates must be authenticated and possibly encrypted. One way to achieve this is to rely on static FPGA manufacturer-provided cryptography and respective master keys. However, in this contribution, we show how to retrofit Xilinx Zynq FPGAs with an alternative cryptographic accelerator and how to establish device-individual keys using Physical Unclonable Function (PUF) technology. These two key aspects reduce the required trust in manufacturer-provided security features while increasing the security by binding configurations to a specific device.},
	booktitle = {2017 30th {IEEE} {International} {System}-on-{Chip} {Conference} ({SOCC})},
	author = {Jacob, N. and Wittmann, J. and Heyszl, J. and Hesselbarth, R. and Wilde, F. and Pehl, M. and Sigl, G. and Fischer, K.},
	month = sep,
	year = {2017},
	note = {ISSN: 2164-1706},
	keywords = {Hardware, Software, Field programmable gate arrays, cryptography, Cryptography, field programmable gate arrays, system-on-chip, alternative cryptographic accelerator, binding configurations, communication interfaces, cryptographic accelerators, cryptographic engine, Engines, FPGA, FPGA SoC configurations, hardware configuration, industrial control devices, integrated FPGA, Iron, manufacturer-provided security features, multicore CPU, partial reconfiguration, physical unclonable function technology, programmable hardware functionality, PUF, secure boot, SoC, software performance, static FPGA manufacturer, system-on-chips, Xilinx Zynq FPGA, Zynq},
	pages = {114--119},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\HQSU9YBB\\8226019.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\DE74AN4D\\Jacob et al. - 2017 - Securing FPGA SoC configurations independent of th.pdf:application/pdf},
}

@inproceedings{ender_insights_2019,
	address = {New York, NY, USA},
	series = {{ASPDAC} '19},
	title = {Insights into the mind of a trojan designer: the challenge to integrate a trojan into the bitstream},
	isbn = {978-1-4503-6007-4},
	shorttitle = {Insights into the mind of a trojan designer},
	url = {https://doi.org/10.1145/3287624.3288742},
	doi = {10.1145/3287624.3288742},
	abstract = {The threat of inserting hardware Trojans during the design, production, or in-field poses a danger for integrated circuits in real-world applications. A particular critical case of hardware Trojans is the malicious manipulation of third-party FPGA configurations. In addition to attack vectors during the design process, FPGAs can be infiltrated in a non-invasive manner after shipment through alterations of the bitstream. First, we present an improved methodology for bitstream file format reversing. Second, we introduce a novel idea for Trojan insertion.},
	urldate = {2020-11-12},
	booktitle = {Proceedings of the 24th {Asia} and {South} {Pacific} {Design} {Automation} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Ender, Maik and Swierczynski, Pawel and Wallat, Sebastian and Wilhelm, Matthias and Knopp, Paul Martin and Paar, Christof},
	month = jan,
	year = {2019},
	pages = {112--119},
	file = {Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\FD7YW2U6\\Ender et al. - 2019 - Insights into the mind of a trojan designer the c.pdf:application/pdf},
}

@article{fyrbiak_halmissing_2019,
	title = {{HAL}—{The} {Missing} {Piece} of the {Puzzle} for {Hardware} {Reverse} {Engineering}, {Trojan} {Detection} and {Insertion}},
	volume = {16},
	issn = {1941-0018},
	doi = {10.1109/TDSC.2018.2812183},
	abstract = {Hardware manipulations pose a serious threat to numerous systems, ranging from a myriad of smart-X devices to military systems. In many attack scenarios an adversary merely has access to the low-level, potentially obfuscated gate-level netlist. In general, the attacker possesses minimal information and faces the costly and time-consuming task of reverse engineering the design to identify security-critical circuitry, followed by the insertion of a meaningful hardware Trojan. These challenges have been considered only in passing by the research community. The contribution of this work is threefold: First, we present HAL, a comprehensive reverse engineering and manipulation framework for gate-level netlists. HAL allows automating defensive design analysis (e.g., including arbitrary Trojan detection algorithms with minimal effort) as well as offensive reverse engineering and targeted logic insertion. Second, we present a novel static analysis Trojan detection technique ANGEL which considerably reduces the false-positive detection rate of the detection technique FANCI. Furthermore, we demonstrate that ANGEL is capable of automatically detecting Trojans obfuscated with DeTrust. Third, we demonstrate how a malicious party can semi-automatically inject hardware Trojans into third-party designs. We present reverse engineering algorithms to disarm and trick cryptographic self-tests, and subtly leak cryptographic keys without any a priori knowledge of the design's internal workings.},
	number = {3},
	journal = {IEEE Transactions on Dependable and Secure Computing},
	author = {Fyrbiak, M. and Wallat, S. and Swierczynski, P. and Hoffmann, M. and Hoppach, S. and Wilhelm, M. and Weidlich, T. and Tessier, R. and Paar, C.},
	month = may,
	year = {2019},
	note = {Conference Name: IEEE Transactions on Dependable and Secure Computing},
	keywords = {Hardware, invasive software, Trojan horses, Field programmable gate arrays, cryptography, Cryptography, ANGEL, comprehensive reverse engineering, costly time-consuming task, defensive design analysis, detection technique FANCI, false-positive detection rate, gate-level netlists, hardware manipulations, hardware reverse engineering, Hardware reverse engineering, hardware Trojan, hardware Trojan detection, hardware Trojans, inject hardware Trojans, Logic gates, military systems, offensive reverse engineering, reverse engineering, Reverse engineering, reverse engineering algorithms, security of data, security-critical circuitry, smart-X devices, static analysis Trojan detection technique ANGEL, targeted logic insertion, third-party designs, Trojan detection algorithms},
	pages = {498--510},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\4WESPBHN\\8306831.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\B32XXY2V\\Fyrbiak et al. - 2019 - HAL—The Missing Piece of the Puzzle for Hardware R.pdf:application/pdf},
}

@article{swierczynski_physical_2014,
	title = {Physical {Security} {Evaluation} of the {Bitstream} {Encryption} {Mechanism} of {Altera} {Stratix} {II} and {Stratix} {III} {FPGAs}},
	volume = {7},
	issn = {1936-7406},
	url = {https://doi.org/10.1145/2629462},
	doi = {10.1145/2629462},
	abstract = {To protect Field-Programmable Gate Array (FPGA) designs against Intellectual Property (IP) theft and related issues such as product cloning, all major FPGA manufacturers offer a mechanism to encrypt the bitstream that is used to configure the FPGA. From a mathematical point of view, the employed encryption algorithms (e.g., Advanced Encryption Standard (AES) or 3DES) are highly secure. However, it has been shown that the bitstream encryption feature of several FPGA families is susceptible to side-channel attacks based on measuring the power consumption of the cryptographic module. In this article, we present the first successful attack on the bitstream encryption of the Altera Stratix II and Stratix III FPGA families. To this end, we analyzed the Quartus II software and reverse engineered the details of the proprietary and unpublished schemes used for bitstream encryption on Stratix II and Stratix III. Using this knowledge, we demonstrate that the full 128-bit AES key of a Stratix II as well as the full 256-bit AES key of a Stratix III can be recovered by means of side-channel attacks. In both cases, the attack can be conducted in a few hours. The complete bitstream of these FPGAs that are (seemingly) protected by the bitstream encryption feature can hence fall into the hands of a competitor or criminal—possibly implying system-wide damage if confidential information such as proprietary encryption schemes or secret keys programmed into the FPGA are extracted. In addition to lost IP, reprogramming the attacked FPGA with modified code, for instance, to secretly plant a hardware Trojan, is a particularly dangerous scenario for many security-critical applications.},
	number = {4},
	urldate = {2020-11-12},
	journal = {ACM Transactions on Reconfigurable Technology and Systems},
	author = {Swierczynski, Pawel and Moradi, Amir and Oswald, David and Paar, Christof},
	month = dec,
	year = {2014},
	keywords = {hardware security, reverse engineering, AES, Altera, bitstream encryption, Side-channel attack, Stratix II, Stratix III},
	pages = {34:1--34:23},
	file = {Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\74BG7IH8\\Swierczynski et al. - 2014 - Physical Security Evaluation of the Bitstream Encr.pdf:application/pdf},
}

@article{zhang_recent_2019,
	title = {Recent {Attacks} and {Defenses} on {FPGA}-based {Systems}},
	volume = {12},
	issn = {1936-7406},
	url = {https://doi.org/10.1145/3340557},
	doi = {10.1145/3340557},
	abstract = {Field-programmable gate array (FPGA) is a kind of programmable chip that is widely used in many areas, including automotive electronics, medical devices, military and consumer electronics, and is gaining more popularity. Unlike the application specific integrated circuits (ASIC) design, an FPGA-based system has its own supply-chain model and design flow, which brings interesting security and trust challenges. In this survey, we review the security and trust issues related to FPGA-based systems from the market perspective, where we model the market with the following parties: FPGA vendors, foundries, IP vendors, EDA tool vendors, FPGA-based system developers, and end-users. For each party, we show the security and trust problems they need to be aware of and the associated solutions that are available. We also discuss some challenges and opportunities in the security and trust of FPGA-based systems used in large-scale cloud and datacenters.},
	number = {3},
	urldate = {2020-11-12},
	journal = {ACM Transactions on Reconfigurable Technology and Systems},
	author = {Zhang, Jiliang and Qu, Gang},
	month = aug,
	year = {2019},
	keywords = {hardware security, FPGA security, FPGA trust},
	pages = {14:1--14:24},
	file = {Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\3G6YTGC4\\Zhang and Qu - 2019 - Recent Attacks and Defenses on FPGA-based Systems.pdf:application/pdf},
}

@inproceedings{vliegen_sacha_2019,
	title = {{SACHa}: {Self}-{Attestation} of {Configurable} {Hardware}},
	shorttitle = {{SACHa}},
	doi = {10.23919/DATE.2019.8714775},
	abstract = {Device attestation is a procedure to verify whether an embedded device is running the intended application code. This way, protection against both physical attacks and remote attacks on the embedded software is aimed for. With the wide adoption of Field-Programmable Gate Arrays or FPGAs, hardware also became configurable, and hence susceptible to attacks (just like software). In addition, an upcoming trend for hardware-based attestation is the use of configurable FPGA hardware. Therefore, in order to attest a whole system that makes use of FPGAs, the status of both the software and the hardware needs to be verified, without the availability of a tamper-resistant hardware module.In this paper, we propose a solution in which a prover core on the FPGA performs an attestation of the entire FPGA, including a self-attestation. This way, the FPGA can be used as a tamper-resistant hardware module to perform hardware-based attestation of a processor, resulting in a protection of the entire hardware/software system against malicious code updates.},
	booktitle = {2019 {Design}, {Automation} {Test} in {Europe} {Conference} {Exhibition} ({DATE})},
	author = {Vliegen, J. and Rabbani, M. M. and Conti, M. and Mentens, N.},
	month = mar,
	year = {2019},
	note = {ISSN: 1558-1101},
	keywords = {Computer architecture, Hardware, Software, Field programmable gate arrays, field programmable gate arrays, configurable FPGA hardware, configurable hardware, device attestation, embedded device, embedded software, embedded systems, field-programmable gate arrays, FPGAs, hardware-based attestation, hardware-software system, intended application code, Microprocessors, physical attacks, Protocols, Read only memory, remote attacks, SACHa, self-attestation, tamper-resistant hardware module},
	pages = {746--751},
	file = {IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\IXBRTPCP\\Vliegen et al. - 2019 - SACHa Self-Attestation of Configurable Hardware.pdf:application/pdf},
}

@article{vliegen_secure_2014,
	title = {Secure, {Remote}, {Dynamic} {Reconfiguration} of {FPGAs}},
	volume = {7},
	issn = {1936-7406},
	url = {https://doi.org/10.1145/2629423},
	doi = {10.1145/2629423},
	abstract = {With the widespread availability of broadband Internet, Field-Programmable Gate Arrays (FPGAs) can get remote updates in the field. This provides hardware and software updates, and enables issue solving and upgrade ability without device modification. In order to prevent an attacker from eavesdropping or manipulating the configuration data, security is a necessity. This work describes an architecture that allows the secure, remote reconfiguration of an FPGA. The architecture is partially dynamically reconfigurable and it consists of a static partition that handles the secure communication protocol and a single reconfigurable partition that holds the main application. Our solution distinguishes itself from existing work in two ways: it provides entity authentication and it avoids the use of a trusted third party. The former provides protection against active attackers on the communication channel, while the latter reduces the number of reliable entities. Additionally, this work provides basic countermeasures against simple power-oriented side-channel analysis attacks. The result is an implementation that is optimized toward minimal resource occupation. Because configuration updates occur infrequently, configuration speed is of minor importance with respect to area. A prototype of the proposed design is implemented, using 5,702 slices and having minimal downtime.},
	number = {4},
	urldate = {2020-11-12},
	journal = {ACM Transactions on Reconfigurable Technology and Systems},
	author = {Vliegen, Jo and Mentens, Nele and Verbauwhede, Ingrid},
	month = dec,
	year = {2014},
	keywords = {FPGA, partial reconfiguration, DPR, remote, secure},
	pages = {35:1--35:19},
	file = {Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\32TRIKPM\\32TRIKPM.pdf:application/pdf},
}

@article{ustaoglu_recofused_2020,
	title = {{ReCoFused} partial reconfiguration for secure moving-target countermeasures on {FPGAs}},
	volume = {2},
	issn = {2523-3971},
	url = {https://doi.org/10.1007/s42452-020-3003-x},
	doi = {10.1007/s42452-020-3003-x},
	abstract = {Partial reconfiguration is a versatile technique to modify the functionality of field programmable gate arrays (FPGAs) at run time. When performing partial reconfiguration a dedicated intellectual property (IP) component of the FPGA vendor, i.e., the partial reconfiguration controller (PRC), among a wide range of IP components has to be used. While ensuring the functional safety of FPGA designs is well understood, ensuring hardware security still remains challenging. This applies in particular to reconfiguration-based countermeasures which are intensively used to create a moving target for an attacker. Reconfiguration-based countermeasures against side-channel attacks or differential power analysis (DPA) attacks were implemented. However, from the system security perspective, the above mentioned PRC is a critical component as was noticed by many papers before. In this work, we extend a previously proposed safety mechanism which creates a container around an IP, to encapsulate and thereby to protect and observe the PRC of a FPGA. The proposed encapsulation scheme results in an architecture comprising so-called ReCoFuses (RCFs), each capturing a specific protective goal which have to be fulfilled at any time during PRC operation. The terminology follows the classical electric installation including a fuse box. In our scheme we employ formal verification to guarantee the correctness in detecting a security violation. Only after successful verification, the RCFs are integrated into the ReCoFuse Container. Experimental results demonstrate the advantage of our approach by preventing attacks on the PRC of a system secured by partial reconfiguration.},
	language = {en},
	number = {8},
	urldate = {2020-11-09},
	journal = {SN Applied Sciences},
	author = {Ustaoğlu, Buse and Schmitz, Kenneth and Große, Daniel and Drechsler, Rolf},
	month = jul,
	year = {2020},
	pages = {1363},
	file = {Springer Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\HNN7C695\\Ustaoğlu et al. - 2020 - ReCoFused partial reconfiguration for secure movin.pdf:application/pdf},
}

@article{ram_dynamic_2020,
	title = {Dynamic partial reconfiguration enchanced with security system for reduced area and low power consumption},
	volume = {76},
	issn = {01419331},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0141933119306180},
	doi = {10.1016/j.micpro.2020.103088},
	language = {en},
	urldate = {2020-11-01},
	journal = {Microprocessors and Microsystems},
	author = {Ram, R. Saravana and Prabhaker, M. Lordwin Cecil and Suresh, K. and Subramaniam, Kamalraj and Venkatesan, M.},
	month = jul,
	year = {2020},
	pages = {103088},
	file = {Ram et al. - 2020 - Dynamic partial reconfiguration enchanced with sec.pdf:C\:\\Users\\sgdon\\Zotero\\storage\\N6R4MVDS\\Ram et al. - 2020 - Dynamic partial reconfiguration enchanced with sec.pdf:application/pdf},
}

@inproceedings{vliegen_single-chip_2013,
	title = {A single-chip solution for the secure remote configuration of {FPGAs} using bitstream compression},
	doi = {10.1109/ReConFig.2013.6732330},
	abstract = {This paper presents a system that allows the secure remote configuration of an FPGA, which is assumed to be the only device in the secure zone. This means that no security critical information passes over the borders of the FPGA chip, reducing the opportunities for an attacker to break the system. In particular, bitstream compression in combination with partial reconfiguration is used to avoid the use of an external memory for the storage of the bitstream. Additionally there is no need for an external processor for the transfer of the bitstream. Nevertheless, our solution contains a mechanism that verifies the integrity of the complete bitstream before starting the configuration. This prevents attempts to load unqualified bitstreams and reduces the downtime. The integrity check, the decryption, the authentication of the origin and the freshness check of the bitstream are performed inside the FPGA while its current configuration is still active. The contribution of this work is that it presents the first complete working system for the secure remote configuration of FPGAs, consisting of a single FPGA chip and an initiating server, given that the integrity of the complete bitstream is verified before configuration. This paper gives details on the overall system and the FPGA architecture, which have been implemented and tested.},
	booktitle = {2013 {International} {Conference} on {Reconfigurable} {Computing} and {FPGAs} ({ReConFig})},
	author = {Vliegen, J. and Mentcns, N. and Verbauwhede, I.},
	month = dec,
	year = {2013},
	note = {ISSN: 2325-6532},
	keywords = {Field programmable gate arrays, Cryptography, field programmable gate arrays, partial reconfiguration, security of data, Protocols, bitstream compression, Encoding, external processor, FPGA architecture, FPGA chip, IP networks, Payloads, secure remote configuration, security critical information, Servers, single chip solution},
	pages = {1--6},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\YCWZNQL9\\6732330.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\7P8YJXSY\\7P8YJXSY.pdf:application/pdf},
}

@inproceedings{parrinha_flexible_2017,
	title = {Flexible and low-cost {HSM} based on non-volatile {FPGAs}},
	doi = {10.1109/RECONFIG.2017.8279795},
	abstract = {Embedded systems supported on FPGAs are increasingly playing a bigger role on safety-critical areas. A particular example of a safety-critical system is a Hardware Security Module, providing private key management and usage in a secure and reliable way. However, commercially available systems are too expensive and limited in the provided functionality. On the other hand, existing volatile FPGA solutions do not adequately provide the needed security features. Herein, an open-source, low-cost and highly flexible re-configurable Hardware Security Module is proposed, supported by a System-on-Chip with a non-volatile FPGA. The presented solution operates as a versatile certification system that provides key management, digital signature services and is able to issue trustworthy certificates. The solution can be used, for example, in IT security applications through an integration with the included PKCS\#11 interface. To further illustrate the flexibility of the proposed solution, a Log-Chain certification use-case is also presented. Experimental results suggest that the system is able to compute up to 2 sign/certification operations per second with a low cost, adaptable, and secure approach.},
	booktitle = {2017 {International} {Conference} on {ReConFigurable} {Computing} and {FPGAs} ({ReConFig})},
	author = {Parrinha, D. and Chaves, R.},
	month = dec,
	year = {2017},
	keywords = {Hardware, Field programmable gate arrays, Cryptography, field programmable gate arrays, system-on-chip, embedded systems, FPGAs, Authentication, Certification, certification system, digital signature services, digital signatures, highly flexible reconfigurable hardware security module, HSM, log-chain certification use-case, low-cost HSM, message authentication, Non-volatile FPGA/SoC, nonvolatile FPGA, Nonvolatile memory, Performance evaluation, PKCS\#11 interface, private key cryptography, private key management, public key cryptography, safety-critical system, security applications, sign/certification operations, trustworthy certificates, volatile FPGA solutions},
	pages = {1--8},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\L6ME37GK\\8279795.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\AYHLSZND\\Parrinha and Chaves - 2017 - Flexible and low-cost HSM based on non-volatile FP.pdf:application/pdf},
}

@article{ustaoglu_recofused_2020-1,
	title = {{ReCoFused} partial reconfiguration for secure moving-target countermeasures on {FPGAs}},
	volume = {2},
	issn = {2523-3971},
	url = {https://doi.org/10.1007/s42452-020-3003-x},
	doi = {10.1007/s42452-020-3003-x},
	abstract = {Partial reconfiguration is a versatile technique to modify the functionality of field programmable gate arrays (FPGAs) at run time. When performing partial reconfiguration a dedicated intellectual property (IP) component of the FPGA vendor, i.e., the partial reconfiguration controller (PRC), among a wide range of IP components has to be used. While ensuring the functional safety of FPGA designs is well understood, ensuring hardware security still remains challenging. This applies in particular to reconfiguration-based countermeasures which are intensively used to create a moving target for an attacker. Reconfiguration-based countermeasures against side-channel attacks or differential power analysis (DPA) attacks were implemented. However, from the system security perspective, the above mentioned PRC is a critical component as was noticed by many papers before. In this work, we extend a previously proposed safety mechanism which creates a container around an IP, to encapsulate and thereby to protect and observe the PRC of a FPGA. The proposed encapsulation scheme results in an architecture comprising so-called ReCoFuses (RCFs), each capturing a specific protective goal which have to be fulfilled at any time during PRC operation. The terminology follows the classical electric installation including a fuse box. In our scheme we employ formal verification to guarantee the correctness in detecting a security violation. Only after successful verification, the RCFs are integrated into the ReCoFuse Container. Experimental results demonstrate the advantage of our approach by preventing attacks on the PRC of a system secured by partial reconfiguration.},
	language = {en},
	number = {8},
	urldate = {2020-10-25},
	journal = {SN Applied Sciences},
	author = {Ustaoğlu, Buse and Schmitz, Kenneth and Große, Daniel and Drechsler, Rolf},
	month = jul,
	year = {2020},
	pages = {1363},
	file = {Springer Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\F58ZS5BZ\\Ustaoğlu et al. - 2020 - ReCoFused partial reconfiguration for secure movin.pdf:application/pdf},
}

@article{goren_partial_2013,
	title = {Partial bitstream protection for low-cost {FPGAs} with physical unclonable function, obfuscation, and dynamic partial self reconfiguration},
	volume = {39},
	issn = {0045-7906},
	url = {http://www.sciencedirect.com/science/article/pii/S0045790612001930},
	doi = {10.1016/j.compeleceng.2012.10.009},
	abstract = {This paper proposes a technique based on Physical Unclonable Functions (PUFs), obfuscation, and Dynamic Partial Self Reconfiguration (DPSR) to protect partial FPGA configuration bitstreams from cloning and reverse engineering. With the aid of this technique, we are able to do the equivalent of partial bitstream encryption on low-cost FPGAs, which is only featured on high-end FPGAs. Low-cost FPGAs do not even have built-in support for encrypted (full) bitstreams. Through DPSR, our PUF implementation does not steal real estate from the encrypted design. We also present a new DPSR flow for Xilinx FPGAs, which is difference-based but still allows modular design. It works regardless of the amount of difference between Partial Reconfiguration (PR) modules and is called DPSR-LD, where LD stands for Large-Difference. DPSR-LD is an enabler especially for Spartan-6 FPGA family, as Xilinx currently supports PR on Spartan-6 only through the difference-based flow and only for small differences. Our DPSR-LD also includes a controller that interfaces to the ICAP and can process compressed bitstreams. It is called ICAP+ and occupies only 1\% of Spartan-6 slices.},
	language = {en},
	number = {2},
	urldate = {2020-10-25},
	journal = {Computers \& Electrical Engineering},
	author = {Gören, Sezer and Ozkurt, Ozgur and Yildiz, Abdullah and Ugurdag, H. Fatih and Chakraborty, Rajat S. and Mukhopadhyay, Debdeep},
	month = feb,
	year = {2013},
	pages = {386--397},
	file = {ScienceDirect Snapshot:C\:\\Users\\sgdon\\Zotero\\storage\\YKUAY92F\\S0045790612001930.html:text/html},
}

@inproceedings{johnson_fault_2014,
	address = {New York, NY, USA},
	series = {{WESS} '14},
	title = {Fault attack on {AES} via hardware {Trojan} insertion by dynamic partial reconfiguration of {FPGA} over ethernet},
	isbn = {978-1-4503-2932-3},
	url = {https://doi.org/10.1145/2668322.2668323},
	doi = {10.1145/2668322.2668323},
	abstract = {We describe a novel methodology to exploit the widely used Dynamic Partial Reconfiguration (DPR) support in Field Programmable Gate Arrays (FPGAs) to implant a hardware Trojan in an Advanced Encryption Standard (AES) encryption circuit implemented on a FPGA. The DPR is performed by transferring the required partial configuration bitstream file over an Ethernet connection to the FPGA board, from an attacker's computer which can communicate with the FPGA over a network. The inserted Trojan launches a "fault attack" on the AES encryption circuit, which enables recovery of the secret key by standard mathematical analysis of the faulty ciphertext produced. To the best of our knowledge, this is the first reported attack which exploits DPR to break an AES hardware implementation on FPGA. Our implementation results establish this to be an extremely potent attack on AES at low hardware and computational overhead, while using the standard unlicensed FPGA design tools.},
	urldate = {2020-10-25},
	booktitle = {Proceedings of the 9th {Workshop} on {Embedded} {Systems} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Johnson, Anju P. and Saha, Sayandeep and Chakraborty, Rajat Subhra and Mukhopadhyay, Debdeep and Gören, Sezer},
	month = oct,
	year = {2014},
	keywords = {FPGA, hardware Trojan, AES, dynamic partial reconfiguration, fault attack},
	pages = {1--8},
	file = {Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\DC4Z29CX\\Johnson et al. - 2014 - Fault attack on AES via hardware Trojan insertion .pdf:application/pdf},
}

@article{guha_criticality_2019,
	title = {Criticality based reliability against hardware {Trojan} attacks for processing of tasks on reconfigurable hardware},
	volume = {71},
	doi = {10.1016/j.micpro.2019.102865},
	abstract = {An important aspect of mixed critical systems is to execute tasks of varied criticality on the same platform. The property of full or partial reconfiguration at runtime of reconfigurable hardware or field programmable gate arrays (FPGAs) has satisfied this criterion and facilitated the processing of mixed critical tasks directly on hardware, with the aid of reconfigurable intellectual properties (IPs) or bitstreams procured from various third party IP (3PIP) vendors. However, the existing literature in this arena does not consider the associated hardware threats. Such threats are particularly dangerous as related malware like Hardware Trojan Horses (HTHs) remain dormant during testing and evade detection, but get activated at runtime and jeopardize mission critical applications. Though several works exist on hardware security, none focus on reliability driven mixed critical task processing on reconfigurable hardware against HTH attacks. In this work, we initially explore how HTHs implanted by 3PIP vendors in the bitstreams may cause active attacks. Then, we develop strategies to ensure reliability for processing of mixed critical tasks on reconfigurable hardware. Both periodic and non-periodic, i.e. aperiodic or sporadic tasks are considered. We also focus on resource constrained environments, where we adhere to frequency scaling to facilitate accommodation of tasks on limited resources. We experiment with a variety of bitstreams and performance evaluation is performed via metrics such as task success rate, task rejection rate and task preemption rate. © 2019},
	journal = {Microprocessors and Microsystems},
	author = {Guha, K. and Majumder, A. and Saha, D. and Chakrabarti, A.},
	year = {2019},
	keywords = {Hardware trojan horses, Mixed critical tasks, Reconfigurable hardware},
	file = {SCOPUS Snapshot:C\:\\Users\\sgdon\\Zotero\\storage\\AR5MT6NY\\display.html:text/html},
}

@article{labafniya_feasibility_2020,
	title = {On the feasibility of using evolvable hardware for hardware {Trojan} detection and prevention},
	volume = {91},
	issn = {1568-4946},
	url = {http://www.sciencedirect.com/science/article/pii/S1568494620301873},
	doi = {10.1016/j.asoc.2020.106247},
	abstract = {Evolvable hardware (EH) architectures are capable of changing their configuration and behavior dynamically based on inputs from the environment. In this paper, we investigate the feasibility of using EH to prevent Hardware Trojan Horses (HTHs) from being inserted, activated, or propagated in a digital electronic chip. HTHs are malicious hardware components that intend to leak secret information or cause malfunctioning at run-time in the chip in which they are integrated. We hypothesize that EH can detect internal circuit errors at run-time and reconfigure to a state in which the errors are no longer present. We implement a Virtual Reconfigurable Circuit (VRC) on a Field-Programmable Gate Array (FPGA) that autonomously and periodically reconfigures itself based on an Evolutionary Algorithm (EA). New VRC configurations are generated with an on-chip EA engine. We show that the presented approach is applicable in a scenario in which (1) the HTH-critical areas in the circuit are known in advance, and (2) the VRC is a purely combinatorial circuit, as opposed to the on-chip memory holding the golden reference, which requires one or more cycles to be read/written. We compare two different approaches for protecting the system against HTHs: Genetic Programming (GP) and Cartesian Genetic Programming (CGP). The paper reports on experiments on four benchmark circuits and gives an overview of both the limitations and the added value of the presented approaches.},
	language = {en},
	urldate = {2020-10-25},
	journal = {Applied Soft Computing},
	author = {Labafniya, Mansoureh and Picek, Stjepan and Etemadi Borujeni, Shahram and Mentens, Nele},
	month = jun,
	year = {2020},
	keywords = {Evolvable Hardware (EH), Field-Programmable Gate Array (FPGA), Hardware security, Hardware Trojan Horse (HTH), Virtual Reconfigurable Circuit (VRC)},
	pages = {106247},
	file = {ScienceDirect Snapshot:C\:\\Users\\sgdon\\Zotero\\storage\\EY7KG8II\\S1568494620301873.html:text/html},
}

@article{kepa_serecon_2010,
	title = {{SeReCon}: a secure reconfiguration controller for self-reconfigurable systems},
	volume = {1},
	issn = {1757-8779},
	shorttitle = {{SeReCon}},
	url = {https://doi.org/10.1504/IJCCBS.2010.031707},
	doi = {10.1504/IJCCBS.2010.031707},
	abstract = {A risk of covert insertion of circuitry into reconfigurable computing (RC) systems exists. This paper reviews risks of hardware attack on field programmable gate array (FPGA)-based RC systems and proposes a method for secure system credentials generation (unique, random and partially anonymous) and trusted self-reconfiguration, using a secure reconfiguration controller (SeReCon) and partial reconfiguration (PR). SeReCon provides a root of trust (RoT) for RC systems, incorporating novel algorithms for security credentials generation and trusted design verification. Credentials are generated internally, during system certification. The private credential element never leaves the SeReCon security perimeter. To provide integrity-maintaining self-reconfiguration, SeReCon performs analysis of each new IP core structure prior to reconfiguration. An unverified IP core can be used provided that its spatial isolation is retained. SeReCon provides encrypted storage for installed IP cores. Resource usage for a prototype SeReCon system is presented. The protection provided by SeReCon is illustrated in a number of security attack scenarios.},
	number = {1/2/3},
	urldate = {2020-10-25},
	journal = {International Journal of Critical Computer-Based Systems},
	author = {Kepa, Krzysztof and Morgan, Fearghal and Kosciuszkiewicz, Krzysztof and Surmacz, Tomasz},
	month = feb,
	year = {2010},
	keywords = {trusted computing, field programmable gate arrays, FPGA, partial reconfiguration, critical computing, critical embedded systems, design assurance, design integrity, design security, hardware attacks, reconfigurable computing, reconfiguration control, self-reconfiguration},
	pages = {86--103},
	file = {Submitted Version:C\:\\Users\\sgdon\\Zotero\\storage\\A3STR2HY\\Kepa et al. - 2010 - SeReCon a secure reconfiguration controller for s.pdf:application/pdf},
}

@article{hori_bitstream_2013,
	title = {Bitstream {Protection} in {Dynamic} {Partial} {Reconfiguration} {Systems} {Using} {Authenticated} {Encryption}},
	volume = {E96.D},
	doi = {10.1587/transinf.E96.D.2333},
	abstract = {Protecting the confidentiality and integrity of a configuration bitstream is essential for the dynamic partial reconfiguration (DPR) of field-programmable gate arrays (FPGAs). This is because erroneous or falsified bitstreams can cause fatal damage to FPGAs. In this paper, we present a high-speed and area-efficient bitstream protection scheme for DPR systems using the Advanced Encryption Standard with Galois/Counter Mode (AES-GCM), which is an authenticated encryption algorithm. Unlike many previous studies, our bitstream protection scheme also provides a mechanism for error recovery and tamper resistance against configuration block deletion, insertion, and disorder. The implementation and evaluation results show that our DPR scheme achieves a higher performance, in terms of speed and area, than previous methods.},
	number = {11},
	journal = {IEICE Transactions on Information and Systems},
	author = {Hori, Yohei and Katashita, Toshihiro and Sakane, Hirofumi and Toda, Kenji and Satoh, Akashi},
	year = {2013},
	keywords = {Advanced Encryption Standard (AES), authenticated encryption, dynamic partial reconfiguration (DPR), field-programmable gate array (FPGA), Galois/Counter Mode (GCM)},
	pages = {2333--2343},
	file = {Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\4SGVAL2N\\Hori et al. - 2013 - Bitstream Protection in Dynamic Partial Reconfigur.pdf:application/pdf;J-Stage - Snapshot:C\:\\Users\\sgdon\\Zotero\\storage\\DCIXB2HG\\en.html:text/html},
}

@article{ram_dynamic_2020-1,
	title = {Dynamic partial reconfiguration enchanced with security system for reduced area and low power consumption},
	volume = {76},
	issn = {0141-9331},
	url = {http://www.sciencedirect.com/science/article/pii/S0141933119306180},
	doi = {10.1016/j.micpro.2020.103088},
	abstract = {Field-programmable gate arrays (FPGAs) have travelled far from just being utilized as glue logic to an entire system solution. This is mostly due to their generalized re-configurable nature, lower non-recurring engineering (NRE) expense, and also fast time to market. Owing to the reconfigurable nature of FPGA, a new field called reconfigurable computing that can change the circuit configuration after hardware production came into existence. Application of re-configurable computing for self-adaptive hardware allows hardware to get adapt to various environmental conditions and different needs by swapping or loading disparate computational modules. This work proposes an effectual design methodology (enhanced DPR security system (EDPRSS)) utilized to execute high performance FPGA device in respect of low power consumption along with security for the area reduction. In the proposed technique, hash code generation (HCG) and encryption hardware accelerators can well be dynamically produced on FPGA utilizing partial re-configuration as stated by the application requisites. The system is competent to swap in or swap out the equivalent hardware accelerator during run time, which in turn diminishes the power and area. Here, 2 re-configurable partitions are produced for encryption and also HCG algorithm. Experiential outcomes proved that the proposed technique proffers better performance when contrasted to the other conventional systems.},
	language = {en},
	urldate = {2020-10-25},
	journal = {Microprocessors and Microsystems},
	author = {Ram, R. Saravana and Prabhaker, M. Lordwin Cecil and Suresh, K. and Subramaniam, Kamalraj and Venkatesan, M.},
	month = jul,
	year = {2020},
	keywords = {Data Encryption Standard (DES), Dynamic partial reconfiguration, Field-programmable gate arrays, HCG algorithm, Reconfigurable parallel computing and security},
	pages = {103088},
	file = {ScienceDirect Snapshot:C\:\\Users\\sgdon\\Zotero\\storage\\CPFJVJMW\\S0141933119306180.html:text/html},
}

@article{johnson_remote_2017,
	title = {Remote dynamic partial reconfiguration: {A} threat to {Internet}-of-{Things} and embedded security applications},
	volume = {52},
	issn = {0141-9331},
	shorttitle = {Remote dynamic partial reconfiguration},
	url = {http://www.sciencedirect.com/science/article/pii/S0141933116303970},
	doi = {10.1016/j.micpro.2017.06.005},
	abstract = {The advent of the Internet of Things has motivated the use of Field Programmable Gate Array (FPGA) devices with Dynamic Partial Reconfiguration (DPR) capabilities for dynamic non-invasive modifications to circuits implemented on the FPGA. In particular, the ability to perform DPR over the network is essential in the context of a growing number of Internet of Things (IoT)-based and embedded security applications. However, the use of remote DPR brings with it a number of security threats that could lead to potentially catastrophic consequences in practical scenarios. In this paper, we demonstrate four examples where the remote DPR capability of the FPGA may be exploited by an adversary to launch Hardware Trojan Horse (HTH) attacks on commonly used security applications. We substantiate the threat by demonstrating remotely-launched attacks on Xilinx FPGA-based hardware implementations of a cryptographic algorithm, a true random number generator, and two processor based security applications - namely, a software implementation of a cryptographic algorithm and a cash dispensing scheme. The attacks are launched by on-the-fly transfer of malicious FPGA configuration bitstreams over an Ethernet connection to perform DPR and leak sensitive information. Finally, we comment on plausible countermeasures to prevent such attacks.},
	language = {en},
	urldate = {2020-10-25},
	journal = {Microprocessors and Microsystems},
	author = {Johnson, Anju P. and Patranabis, Sikhar and Chakraborty, Rajat Subhra and Mukhopadhyay, Debdeep},
	month = jul,
	year = {2017},
	keywords = {Hardware security, Dynamic Partial Reconfiguration, Field Programmable Gate Array, Hardware Trojan Horse, Internet of things},
	pages = {131--144},
	file = {Accepted Version:C\:\\Users\\sgdon\\Zotero\\storage\\YNX2BAX5\\YNX2BAX5.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\sgdon\\Zotero\\storage\\NPRV2Z6N\\S0141933116303970.html:text/html},
}

@misc{vliegen_partial_2014,
	title = {Partial and dynamic {FPGA} reconfiguration for security applications},
	url = {/paper/Partial-and-dynamic-FPGA-reconfiguration-for-Vliegen/9645e3123c9c78a2b132b55a439c212d3ebee026},
	abstract = {Today, FPGAs are still often used as prototyping devices. With the latest technologies to produce these devices, FPGAs are becoming larger and faster. With the correct development environments, FPGAs can also be used in end products to provide specialised features that are not always possible with ASIC chips such as in-field updates of hardware. The contributions of this thesis start with implementations of cryptographic primitives. These implementations focus on using minimal resources and are uniformly wrapped to improve interconnectivity and interchangeability between components. Secondly, by using these primitives, we manage to realise the first single-chip, secure, and remote reconfiguration of an FPGA in the field. This is achieved by implementing a cryptographic protocol in combination with bitstream compression. The next contribution is made in realising a proof-of-concept implementation of a licensing scheme for hardware IP cores. We managed this by using a novel storage technique in combination with an academic tool. Our final contribution is in strengthening an existing distributed logging scheme, by moving the sensitive storage from server to FPGA. The reduction in communication overhead is achieved by using the cryptographic implementations on the FPGA to perform the calculations on the sensitive data. When implementing applications that contain cryptographic components, a number of different fields of research come together. The most important research fields that meet in such an implementation focus on cryptology, hardware design, system-on-chip and design tools exploration. We tried to combine the evolutions in these different fields of research into our implementations.},
	language = {en},
	urldate = {2020-10-25},
	journal = {undefined},
	author = {Vliegen, Jo},
	year = {2014},
	file = {Snapshot:C\:\\Users\\sgdon\\Zotero\\storage\\3JBJC5FL\\9645e3123c9c78a2b132b55a439c212d3ebee026.html:text/html},
}

@article{kepa_serecon_2010-1,
	title = {{SeReCon}: a secure reconfiguration controller for self-reconfigurable systems},
	volume = {1},
	issn = {1757-8779, 1757-8787},
	shorttitle = {{SeReCon}},
	url = {http://www.inderscience.com/link.php?id=31707},
	doi = {10.1504/IJCCBS.2010.031707},
	abstract = {A risk of covert insertion of circuitry into reconfigurable computing (RC) systems exists. This paper reviews risks of hardware attack on field programmable gate array (FPGA)-based RC systems and proposes a method for secure system credentials generation (unique, random and partially anonymous) and trusted self-reconfiguration, using a secure reconfiguration controller (SeReCon) and partial reconfiguration (PR).},
	language = {en},
	number = {1/2/3},
	urldate = {2020-10-25},
	journal = {International Journal of Critical Computer-Based Systems},
	author = {Kepa, Krzysztof and Morgan, Fearghal and Kosciuszkiewicz, Krzysztof and Surmacz, Tomasz},
	year = {2010},
	pages = {86},
	file = {Kepa et al. - 2010 - SeReCon a secure reconfiguration controller for s.pdf:C\:\\Users\\sgdon\\Zotero\\storage\\UC8WX7S9\\Kepa et al. - 2010 - SeReCon a secure reconfiguration controller for s.pdf:application/pdf},
}

@article{ram_dynamic_2020-2,
	title = {Dynamic partial reconfiguration enchanced with security system for reduced area and low power consumption},
	volume = {76},
	issn = {0141-9331},
	url = {http://www.sciencedirect.com/science/article/pii/S0141933119306180},
	doi = {10.1016/j.micpro.2020.103088},
	abstract = {Field-programmable gate arrays (FPGAs) have travelled far from just being utilized as glue logic to an entire system solution. This is mostly due to their generalized re-configurable nature, lower non-recurring engineering (NRE) expense, and also fast time to market. Owing to the reconfigurable nature of FPGA, a new field called reconfigurable computing that can change the circuit configuration after hardware production came into existence. Application of re-configurable computing for self-adaptive hardware allows hardware to get adapt to various environmental conditions and different needs by swapping or loading disparate computational modules. This work proposes an effectual design methodology (enhanced DPR security system (EDPRSS)) utilized to execute high performance FPGA device in respect of low power consumption along with security for the area reduction. In the proposed technique, hash code generation (HCG) and encryption hardware accelerators can well be dynamically produced on FPGA utilizing partial re-configuration as stated by the application requisites. The system is competent to swap in or swap out the equivalent hardware accelerator during run time, which in turn diminishes the power and area. Here, 2 re-configurable partitions are produced for encryption and also HCG algorithm. Experiential outcomes proved that the proposed technique proffers better performance when contrasted to the other conventional systems.},
	language = {en},
	urldate = {2020-10-25},
	journal = {Microprocessors and Microsystems},
	author = {Ram, R. Saravana and Prabhaker, M. Lordwin Cecil and Suresh, K. and Subramaniam, Kamalraj and Venkatesan, M.},
	month = jul,
	year = {2020},
	keywords = {Data Encryption Standard (DES), Dynamic partial reconfiguration, Field-programmable gate arrays, HCG algorithm, Reconfigurable parallel computing and security},
	pages = {103088},
	file = {ScienceDirect Snapshot:C\:\\Users\\sgdon\\Zotero\\storage\\FZCXYYWW\\S0141933119306180.html:text/html},
}

@article{kashyap_compact_2016,
	title = {Compact and {On}-the-{Fly} {Secure} {Dynamic} {Reconfiguration} for {Volatile} {FPGAs}},
	volume = {9},
	issn = {1936-7406},
	url = {https://doi.org/10.1145/2816822},
	doi = {10.1145/2816822},
	abstract = {The dynamic partial reconfiguration functionality of FPGAs can be attacked, particularly when the FPGA is remotely located or the configuration bitstreams are sent through insecure networks. The existing FPGA technologies provide some built-in security mechanisms; however, these are often inadequate. The existing solutions still impose a significant impact on the reconfiguration process and on the available resources. This article proposes a solution to improve the security of dynamic partial reconfiguration of FPGAs, without significantly affecting the reconfiguration performance. The proposed solution changes the encryption key of the remotely received bitstream by a randomly generated key, unique for each configuration, when storing them in the external unsecured memory. The native frame-wise error detection mechanism combined with an additional CBC-MAC authentication mechanism, allows for an improved countermeasure against replay attack and wrongful bitstream usage. The proposed solution introduces an overhead of 1\% of the available resources on the target FPGA and provides the lowest impact on the reconfiguration process when compared to the state of the art, achieving a reconfiguration throughput of 2.5Gbps. Regarding the built-in security mechanism provided by the Xilinx FPGAs, the solution herein proposed provides better security and improves the reconfiguration performance by more than 3 times.},
	number = {2},
	urldate = {2020-10-25},
	journal = {ACM Transactions on Reconfigurable Technology and Systems},
	author = {Kashyap, Hirak and Chaves, Ricardo},
	month = jan,
	year = {2016},
	keywords = {reconfigurable architectures, and system downgrade prevention, Bitstream encryption, bitstream security, secure dynamic partial reconfiguration},
	pages = {11:1--11:22},
	file = {Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\VR9QKRRE\\Kashyap and Chaves - 2016 - Compact and On-the-Fly Secure Dynamic Reconfigurat.pdf:application/pdf},
}

@inproceedings{elnaggar_multi-tenant_2019,
	title = {Multi-{Tenant} {FPGA}-based {Reconfigurable} {Systems}: {Attacks} and {Defenses}},
	shorttitle = {Multi-{Tenant} {FPGA}-based {Reconfigurable} {Systems}},
	doi = {10.23919/DATE.2019.8714904},
	abstract = {Partial reconfiguration of FPGAs improves system performance, increases utilization of hardware resources, and enables run-time update of system capabilities. However, the sharing of FPGA resources among various tenants presents security risks that affect the privacy and reliability of tenant applications running in the FPGA-based system. In this study, we examine the security ramifications of co-tenancy with a focus on address-redirection and task-hiding attacks. We design a counter-measure that protects FPGA-based systems against such attacks and prove that it resists these attacks. We present simulation results and an experimental demonstration using a Xilinx FPGA board to highlight the effectiveness of the countermeasure. The proposed countermeasure incurs negligible cost in terms of the area utilization of FPGAs currently used in the cloud.},
	booktitle = {2019 {Design}, {Automation} {Test} in {Europe} {Conference} {Exhibition} ({DATE})},
	author = {Elnaggar, R. and Karri, R. and Chakrabarty, K.},
	month = mar,
	year = {2019},
	note = {ISSN: 1558-1101},
	keywords = {Hardware, Task analysis, security, Field programmable gate arrays, Cryptography, field programmable gate arrays, reconfigurable architectures, address-redirection, FPGA resources, FPGA-based system, hardware resources, Malware, multitenant FPGA-based reconfigurable systems, run-time update, security ramifications, security risks, system capabilities, system performance, task-hiding attacks, tenant applications, Xilinx FPGA board},
	pages = {7--12},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\U735P4AX\\8714904.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\UZRIKBCW\\Elnaggar et al. - 2019 - Multi-Tenant FPGA-based Reconfigurable Systems At.pdf:application/pdf},
}

@inproceedings{zeineddini_secure_2005,
	title = {Secure partial reconfiguration of {FPGAs}},
	doi = {10.1109/FPT.2005.1568540},
	abstract = {SRAM FPGAs are vulnerable to security breaches such as bitstream cloning, reverse-engineering, and tampering. Bitstream encryption and authentication are two most effective and practical solutions to improve the security of FPGAs. In this paper, we investigate a method to perform a secure dynamic partial reconfiguration of SRAM FPGAs using embedded processor cores. Two schemes based on hard-wired PowerPC processor core and the MicroBlaze soft processor core have been compared and contrasted in terms of speed and FPGA resource usage. A practical experiment, demonstrating feasibility, performance, and flexibility of both schemes has been conducted using Xilinx ML310 board with Xilinx Virtex-II Pro FPGA},
	booktitle = {Proceedings. 2005 {IEEE} {International} {Conference} on {Field}-{Programmable} {Technology}, 2005.},
	author = {Zeineddini, A. S. and Gaj, K.},
	month = dec,
	year = {2005},
	keywords = {Hardware, Random access memory, Field programmable gate arrays, cryptography, Cryptography, field programmable gate arrays, reconfigurable architectures, bitstream encryption, embedded systems, Authentication, secure dynamic partial reconfiguration, Batteries, bitstream authentication, Cloning, embedded processor cores, Embedded system, logic design, MicroBlaze soft processor core, microprocessor chips, Power system security, PowerPC processor core, Protection, security breaches, SRAM chips, SRAM FPGA, Xilinx ML310 board, Xilinx Virtex-II Pro FPGA},
	pages = {155--162},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\ZJGJY32P\\1568540.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\6Y8NIEQB\\Zeineddini and Gaj - 2005 - Secure partial reconfiguration of FPGAs.pdf:application/pdf},
}

@article{noauthor_vivado_2020,
	title = {Vivado {Design} {Suite} {Tutorial}: {Dynamic} {Function} {eXchange}},
	language = {en},
	year = {2020},
	pages = {180},
	file = {2020 - Vivado Design Suite Tutorial Dynamic Function eXc.pdf:C\:\\Users\\sgdon\\Zotero\\storage\\5Q7MFDAC\\2020 - Vivado Design Suite Tutorial Dynamic Function eXc.pdf:application/pdf},
}

@inproceedings{evtyushkin_iso-x_2014,
	title = {Iso-{X}: {A} {Flexible} {Architecture} for {Hardware}-{Managed} {Isolated} {Execution}},
	shorttitle = {Iso-{X}},
	doi = {10.1109/MICRO.2014.25},
	abstract = {We consider the problem of how to provide an execution environment where the application's secrets are safe even in the presence of malicious system software layers. We propose Iso-X – a flexible, fine-grained hardware-supported framework that provides isolation for security-critical pieces of an application such that they can execute securely even in the presence of untrusted system software. Isolation in Iso-X is achieved by creating and dynamically managing compartments to host critical fragments of code and associated data. Iso-X provides fine-grained isolation at the memory-page level, flexible allocation of memory, and a low-complexity, hardware-only trusted computing base. Iso-X requires minimal additional hardware, a small number of new ISA instructions to manage compartments, and minimal changes to the operating system which need not be in the trusted computing base. The run-time performance overhead of Iso-X is negligible and even the overhead of creating and destroying compartments is modest. Iso-X offers higher memory flexibility than the recently proposed SGX design from Intel, allowing both fluid partitioning of the vailable memory space and dynamic growth of compartments. An FPGA implementation of Iso-X runtime mechanisms shows a negligible impact on the processor cycle time.},
	booktitle = {2014 47th {Annual} {IEEE}/{ACM} {International} {Symposium} on {Microarchitecture}},
	author = {Evtyushkin, Dmitry and Elwell, Jesse and Ozsoy, Meltem and Ponomarev, Dmitry and Ghazaleh, Nael Abu and Riley, Ryan},
	month = dec,
	year = {2014},
	note = {ISSN: 2379-3155},
	keywords = {Hardware, security, Security, trusted computing, FPGA, security of data, fine-grained hardware-supported framework, fine-grained isolation, flexible architecture, flexible memory allocation, hardware-managed isolated execution, hardware-only trusted computing base, ISA instructions, Iso-X, isolated execution, low-complexity, Memory management, memory-page level, operating system, Program processors, run-time performance overhead, storage management, Virtual machine monitors},
	pages = {190--202},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\UI3NTKQL\\citations.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\4W282YPJ\\Evtyushkin et al. - 2014 - Iso-X A Flexible Architecture for Hardware-Manage.pdf:application/pdf},
}

@article{hu_surviving_2019,
	title = {Surviving {Information} {Leakage} {Hardware} {Trojan} {Attacks} {Using} {Hardware} {Isolation}},
	volume = {7},
	issn = {2168-6750},
	doi = {10.1109/TETC.2017.2648739},
	abstract = {This paper presents a hardware isolation mechanism to protect secret information in third party IP cores subject to hardware Trojan attacks. We first implement the hardware Trojan threat model in commonly used third party IP cores, such as multiplier and RSA, which leak confidential information from the hardware under rarely triggered conditions. Then, we develop a hardware isolation-based security mechanism to trap the leaked data in the isolated secure environment, which prevents the attacker from unauthorized access to the data in the normal operation mode. We implement both the threat model and defense approach on an Xilinx Zynq SoC equipped with ARM processor. Based on the real hardware prototype, we conduct security and performance evaluations and prove the effectiveness of the proposed approach.},
	number = {2},
	journal = {IEEE Transactions on Emerging Topics in Computing},
	author = {Hu, Nianhang and Ye, Mengmei and Wei, Sheng},
	month = apr,
	year = {2019},
	note = {Conference Name: IEEE Transactions on Emerging Topics in Computing},
	keywords = {Hardware, information leakage, Integrated circuits, invasive software, Trojan horses, Security, cryptography, field programmable gate arrays, system-on-chip, IP networks, microprocessor chips, attacker, confidential information, defense approach, hardware isolation, hardware isolation mechanism, hardware isolation-based security mechanism, hardware prototype, Hardware Trojan, hardware Trojan threat model, information leakage hardware Trojan attacks, isolated secure environment, leaked data, party IP, rarely triggered conditions, Runtime, secret information},
	pages = {253--261},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\AGJW9XZZ\\7805221.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\TZ7RDXYJ\\Hu et al. - 2019 - Surviving Information Leakage Hardware Trojan Atta.pdf:application/pdf},
}

@misc{noauthor_hwselhisa_2020,
	title = {hwsel/hisa},
	url = {https://github.com/hwsel/hisa},
	abstract = {Hardware Isolation-based Secure Architecture for CPU-FPGA Embedded Systems},
	urldate = {2020-09-17},
	publisher = {HWSEL},
	month = aug,
	year = {2020},
	note = {original-date: 2018-07-26T02:04:58Z},
}

@inproceedings{ye_hisa_2018,
	title = {{HISA}: {Hardware} {Isolation}-based {Secure} {Architecture} for {CPU}-{FPGA} {Embedded} {Systems}},
	shorttitle = {{HISA}},
	doi = {10.1145/3240765.3240814},
	abstract = {Heterogeneous CPU-FPGA systems have been shown to achieve significant performance gains in domain-specific computing. However, contrary to the huge efforts invested on the performance acceleration, the community has not yet investigated the security consequences due to incorporating FPGA into the traditional CPU-based architecture. In fact, the interplay between CPU and FPGA in such a heterogeneous system may introduce brand new attack surfaces if not well controlled. We propose a hardware isolation-based secure architecture, namely HISA, to mitigate the identified new threats. HISA extends the CPU-based hardware isolation primitive to the heterogeneous FPGA components and achieves security guarantees by enforcing two types of security policies in the isolated secure environment, namely the access control policy and the output verification policy. We evaluate HISA using four reference FPGA IP cores together with a variety of reference security policies targeting representative CPU-FPGA attacks. Our implementation and experiments on real hardware prove that HISA is an effective security complement to the existing CPU-only and FPGA-only secure architectures.},
	booktitle = {2018 {IEEE}/{ACM} {International} {Conference} on {Computer}-{Aided} {Design} ({ICCAD})},
	author = {Ye, Mengmei and Feng, Xianglong and Wei, Sheng},
	month = nov,
	year = {2018},
	note = {ISSN: 1558-2434},
	keywords = {Computer architecture, Hardware, Security, Software, Field programmable gate arrays, field programmable gate arrays, embedded systems, IP networks, isolated secure environment, authorisation, computer architecture, CPU-based hardware isolation, CPU-FPGA embedded systems, CPU-only secure architectures, domain-specific computing, FPGA-only secure architectures, hardware isolation-based secure architecture, heterogeneous CPU-FPGA systems, heterogeneous FPGA components, heterogeneous system, HISA, Motion detection, reference security policies, representative CPU-FPGA attacks, security complement, security consequences, security guarantees, significant performance gains, traditional CPU-based architecture},
	pages = {1--8},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\F3D2WQM7\\8587726.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\QG7QH4LC\\QG7QH4LC.pdf:application/pdf},
}

@inproceedings{yao_fastrust_2015,
	title = {{FASTrust}: {Feature} analysis for third-party {IP} trust verification},
	shorttitle = {{FASTrust}},
	doi = {10.1109/TEST.2015.7342417},
	abstract = {Third-party intellectual property (3PIP) cores are widely used in integrated circuit designs. It is essential and important to ensure their trustworthiness. Existing hardware trust verification techniques suffer from high computational complexity, low extensibility, and inability to detect implicitly-triggered hardware trojans (HTs). To tackle the above problems, in this paper, we present a novel 3PIP trust verification framework, named FASTrust, which conducts HT feature analysis on the flip-flop level control-data flow graph (CDFG) of the circuit. FASTrust is not only able to identify existing explicitly-triggered and implicitly-triggered HTs appeared in the literature in an efficient and effective manner, but more importantly, it also has the unique advantage of being scalable to defend against future and more stealthy HTs by adding new features to the system.},
	booktitle = {2015 {IEEE} {International} {Test} {Conference} ({ITC})},
	author = {Yao, Song and Chen, Xiaoming and Zhang, Jie and Liu, Qiaoyi and Wang, Jia and Xu, Qiang and Wang, Yu and Yang, Huazhong},
	month = oct,
	year = {2015},
	keywords = {Hardware, Integrated circuit modeling, invasive software, Trojan horses, trusted computing, hardware security, Hardware Trojan, 3PIP cores, 3PIP trust verification framework, Combinational circuits, computational complexity, data flow graphs, explicitly-triggered HT, FASTrust, feature analysis, Feature extraction, flip-flop level control-data flow graph, flip-flops, hardware trust verification techniques, HT feature analysis, implicitly-triggered hardware trojans, implicitly-triggered HT, integrated circuit design, integrated circuit designs, integrated logic circuits, third-party intellectual property, third-party intellectual property core, third-party IP trust verification, trustworthiness, Wires},
	pages = {1--10},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\569C3G9L\\references.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\VYV5UK8W\\Yao et al. - 2015 - FASTrust Feature analysis for third-party IP trus.pdf:application/pdf},
}

@article{mittal_survey_2016,
	title = {A {Survey} of {Techniques} for {Approximate} {Computing}},
	volume = {48},
	issn = {0360-0300},
	url = {https://doi.org/10.1145/2893356},
	doi = {10.1145/2893356},
	abstract = {Approximate computing trades off computation quality with effort expended, and as rising performance demands confront plateauing resource budgets, approximate computing has become not merely attractive, but even imperative. In this article, we present a survey of techniques for approximate computing (AC). We discuss strategies for finding approximable program portions and monitoring output quality, techniques for using AC in different processing units (e.g., CPU, GPU, and FPGA), processor components, memory technologies, and so forth, as well as programming frameworks for AC. We classify these techniques based on several key characteristics to emphasize their similarities and differences. The aim of this article is to provide insights to researchers into working of AC techniques and inspire more efforts in this area to make AC the mainstream computing approach in future systems.},
	number = {4},
	urldate = {2020-09-13},
	journal = {ACM Computing Surveys},
	author = {Mittal, Sparsh},
	month = mar,
	year = {2016},
	keywords = {FPGA, approximate computing technique (ACT), approximate storage, classification, CPU, GPU, neural networks, quality configurability, Review},
	pages = {62:1--62:33},
	file = {Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\URYU5W6Y\\Mittal - 2016 - A Survey of Techniques for Approximate Computing.pdf:application/pdf},
}

@article{barua_approximate_2019,
	title = {Approximate {Computing}: {A} {Survey} of {Recent} {Trends}—{Bringing} {Greenness} to {Computing} and {Communication}},
	volume = {100},
	issn = {2250-2106, 2250-2114},
	shorttitle = {Approximate {Computing}},
	url = {http://link.springer.com/10.1007/s40031-019-00418-8},
	doi = {10.1007/s40031-019-00418-8},
	abstract = {Energy-efﬁcient computing is a much needed technological advantage for future. Approximate or inexact computing is a computing paradigm that can trade energy and computing time with accuracy of output. Recent years have seen a lot of researches in industry as well as academia. The aim of these researches is to fruitfully realize the dream of a greener and energy-efﬁcient computing era. This paper presents a comprehensive and concise survey of the current research trends and contributions in energyefﬁcient computing from computational point of view. Recent developments in approximate computing hardware, software and approximate data communication have also been discussed in this article.},
	language = {en},
	number = {6},
	urldate = {2020-09-13},
	journal = {Journal of The Institution of Engineers (India): Series B},
	author = {Barua, Hrishav Bakul and Mondal, Kartick Chandra},
	month = dec,
	year = {2019},
	pages = {619--626},
	file = {Barua and Mondal - 2019 - Approximate Computing A Survey of Recent Trends—B.pdf:C\:\\Users\\sgdon\\Zotero\\storage\\AGRGU4UZ\\Barua and Mondal - 2019 - Approximate Computing A Survey of Recent Trends—B.pdf:application/pdf},
}

@inproceedings{regazzoni_security_2018,
	title = {Security: {The} {Dark} {Side} of {Approximate} {Computing}?},
	shorttitle = {Security},
	doi = {10.1145/3240765.3243497},
	abstract = {Approximate computing promises significant advantages over more traditional computing architectures with respect to circuit area, performance, power efficiency, flexibility, and cost. Its use is suitable in applications where limited and controlled inaccuracies are tolerable or uncertainty is intrinsic in input or their data processing, e.g., as it happens in (deep-) machine learning, image and signal processing. This paper discusses a dimension of approximate computing that has been neglected so far, despite it represents nowadays a major asset, that of security. A number of hardware-related security threats are considered, and the implications of approximate circuits or systems designed to address these threats are discussed.},
	booktitle = {2018 {IEEE}/{ACM} {International} {Conference} on {Computer}-{Aided} {Design} ({ICCAD})},
	author = {Regazzoni, Francesco and Alippi, Cesare and Polian, Ilia},
	month = nov,
	year = {2018},
	note = {ISSN: 1558-2434},
	keywords = {Computer architecture, Hardware, Circuit faults, Trojan horses, Approximate computing, Cryptography, security of data, computer architecture, approximate circuits, approximate computing, circuit area, hardware-related security threats, image processing, machine learning, signal processing, traditional computing architectures},
	pages = {1--6},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\9UJZA6RP\\8587701.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\GD9HKHI5\\GD9HKHI5.pdf:application/pdf},
}

@incollection{liu_approximate_2018,
	address = {Cham},
	title = {Approximate {Computing} and {Its} {Application} to {Hardware} {Security}},
	isbn = {978-3-319-98935-8},
	url = {https://doi.org/10.1007/978-3-319-98935-8_3},
	abstract = {The demand for high speed and low power in nanoscale integrated circuits (ICs) for many applications, such as image and multimedia data processing, artificial intelligence, and machine learning, where results of the highest accuracy may not be needed, has motivated the development of approximate computing. Approximate circuits, in particular approximate arithmetic units, have been studied extensively and made significant impact on the power performance of such systems. The first goal of this chapter is to review both the existing approximate arithmetic circuitries, which include adders, multipliers, and dividers, and popular approximate algorithms. The second goal of this chapter is to explore broader applications of approximate computing. As an example, we review two case studies, one on a lightweight device authentication scheme based on erroneous adders and the other one on information hiding behind a newly proposed approximate data format. This approach of applying approximate computing in security is interesting and promising in the Internet of things (IoT) domain where the devices are extremely resource constrained and cannot afford conventional cryptographic solutions to provide data security and user privacy. We also discuss the potential of approximate computing in building hardware security primitives for cyber physical system (CPS) and IoT devices.},
	language = {en},
	urldate = {2020-09-08},
	booktitle = {Cyber-{Physical} {Systems} {Security}},
	publisher = {Springer International Publishing},
	author = {Liu, Weiqiang and Gu, Chongyan and Qu, Gang and O’Neill, Máire},
	editor = {Koç, Çetin Kaya},
	year = {2018},
	doi = {10.1007/978-3-319-98935-8_3},
	keywords = {Approximate Computing, Booth Encoder, Hardware Trojan (HT), Physical Unclonable Functions (PUF), Security Primitives},
	pages = {43--67},
	file = {Springer Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\S3Q52P9G\\S3Q52P9G.pdf:application/pdf},
}

@article{gao_approximate_2017,
	title = {Approximate computing for low power and security in the {Internet} of {Things}},
	volume = {50},
	issn = {1558-0814},
	doi = {10.1109/MC.2017.176},
	abstract = {To save resources for Internet of Things (IoT) devices, a proposed approach segments operands and corresponding basic arithmetic operations that can be carried out by approximate function units for almost all applications. The approach also increases the security of IoT devices by hiding information for IP watermarking, digital fingerprinting, and lightweight encryption.},
	number = {6},
	journal = {Computer},
	author = {Gao, Mingze and Wang, Qian and Arafin, Md Tanvir and Lyu, Yongqiang and Qu, Gang},
	year = {2017},
	note = {Conference Name: Computer},
	keywords = {Computer security, security, Approximate computing, cryptography, Power demand, PUF, reverse engineering, IP networks, approximate computing, approximate function units, arithmetic operations, authentication, circuit obfuscation, computer network security, digital arithmetic, digital fingerprinting, encryption, hardware, IEEE 754, information hiding, intellectual property, Internet of Things, IoT, IoT devices, IP, IP watermarking, lightweight encryption, low power, Low power electronics, low-power analysis, low-power electronics, Network resource management, physical unclonable function, power aware computing, security analysis, silicon, Very large scale integration, very large-scale integration, VLSI, watermarking},
	pages = {27--34},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\GTLC46KR\\7945174.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\EYHHV2SM\\EYHHV2SM.pdf:application/pdf},
}

@inproceedings{kinsy_hermes_2017,
	title = {Hermes: {Secure} heterogeneous multicore architecture design},
	shorttitle = {Hermes},
	doi = {10.1109/HST.2017.7951731},
	abstract = {The emergence of general-purpose system-on-chip (SoC) architectures has given rise to a number of significant security challenges. The current trend in SoC design is system-level integration of heterogeneous technologies consisting of a large number of processing elements such as programmable RISC cores, memory, DSPs, and accelerator function units/ASIC. These processing elements may come from different providers, and application executable code may have varying levels of trust. Some of the pressing architecture design questions are: (1) how to implement multi-level user-defined security; (2) how to optimally and securely share resources and data among processing elements. In this work, we develop a secure multicore architecture, named Hermes. It represents a new architectural framework that integrates multiple processing elements (called tenants) of secure and non-secure cores into the same chip design while (a) maintaining individual tenant security, (b) preventing data leakage and corruption, and (c) promoting collaboration among the tenants. The Hermes architecture is based on a programmable secure router interface and a trust-aware routing algorithm. With 17\% hardware overhead, it enables the implementation of processing-element-oblivious secure multicore systems with a programmable distributed group key management scheme.},
	booktitle = {2017 {IEEE} {International} {Symposium} on {Hardware} {Oriented} {Security} and {Trust} ({HOST})},
	author = {Kinsy, Michel A. and Khadka, Shreeya and Isakov, Mihailo and Farrukh, Anam},
	month = may,
	year = {2017},
	keywords = {Hardware, Security, system-on-chip, Program processors, accelerator function units, application executable code, ASIC, DSP, general-purpose system-on-chip architectures, Hermes architecture, Multicore processing, multilevel user-defined security, multiple processing elements, multiprocessing systems, nonsecure cores, programmable distributed group key management scheme, programmable RISC cores, programmable secure router interface, secure cores, secure heterogeneous multicore architecture design, SoC design, system-level integration, System-on-chip, tenant security, trust-aware routing algorithm},
	pages = {14--20},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\URTWNWAT\\7951731.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\RG4T53ZJ\\RG4T53ZJ.pdf:application/pdf},
}

@inproceedings{drzevitzky_achieving_2011,
	title = {Achieving hardware security for reconfigurable systems on chip by a proof-carrying code approach},
	doi = {10.1109/ReCoSoC.2011.5981499},
	abstract = {Reconfigurable systems on chip are increasingly deployed in security and safety critical contexts. When downloading and configuring new hardware functions, we want to make sure that modules adhere to certain security specifications and do not, for example, contain hardware Trojans. As a possible approach to achieving hardware security we propose and demonstrate the concept of proof-carrying hardware, a concept inspired by previous work on proof-carrying code techniques in the software domain. In this paper, we discuss the hardware trust and threat models behind proof-carrying hardware and then present our experimental setup. We detail the employed open-source tool chain for the runtime verification of combinational equivalence and our bitstream format for an abstract FPGA architecture that allows us to experimentally validate the feasibility of our approach.},
	booktitle = {6th {International} {Workshop} on {Reconfigurable} {Communication}-{Centric} {Systems}-on-{Chip} ({ReCoSoC})},
	author = {Drzevitzky, Stephanie and Platzner, Marco},
	month = jun,
	year = {2011},
	keywords = {Computer architecture, Hardware, security, Security, Field programmable gate arrays, field programmable gate arrays, reconfigurable architectures, system-on-chip, FPGA architecture, hardware Trojan security, Logic functions, proof-carrying code approach, proof-carrying code techniques, reconfigurable systems on chip, Safety, software domain, System-on-a-chip},
	pages = {1--8},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\LXU9ADUJ\\5981499.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\C53KNDXW\\Drzevitzky and Platzner - 2011 - Achieving hardware security for reconfigurable sys.pdf:application/pdf},
}

@inproceedings{drzevitzky_proof-carrying_2010,
	title = {Proof-{Carrying} {Hardware}: {Runtime} {Formal} {Verification} for {Secure} {Dynamic} {Reconfiguration}},
	shorttitle = {Proof-{Carrying} {Hardware}},
	doi = {10.1109/FPL.2010.59},
	abstract = {This article proposes Proof-carrying Hardware (PCH) as a novel approach to bring formal verification to hardware security for reconfigurable platforms. The Proof-carrying Hardware combines a hardware module and a formal proof of safety which adheres to a previously established safety policy. These are produced by an untrusted external source and delivered in a unsecured way. The proof can then comparatively easily be verified by the reconfigurable platform, i.e., with a fraction of the effort that was required for computing the proof. The consumer can trust the module without any previous guarantees about any step of the production or the transmission.},
	booktitle = {2010 {International} {Conference} on {Field} {Programmable} {Logic} and {Applications}},
	author = {Drzevitzky, Stephanie},
	month = aug,
	year = {2010},
	note = {ISSN: 1946-1488},
	keywords = {Hardware, security, Security, Software, Field programmable gate arrays, reconfigurable architectures, security of data, Runtime, Safety, formal safety proof, formal verification, hardware module, proof carrying hardware, proof-carrying hardware, Prototypes, runtime formal verification, safety policy, secure dynamic reconfiguration, theorem proving, untrusted external source},
	pages = {255--258},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\KLRQV6LT\\5694258.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\JELRWDQ5\\Drzevitzky - 2010 - Proof-Carrying Hardware Runtime Formal Verificati.pdf:application/pdf},
}

@inproceedings{guo_pch_2017,
	title = {{PCH} framework for {IP} runtime security verification},
	doi = {10.1109/AsianHOST.2017.8353999},
	abstract = {Untrusted third-party vendors and manufacturers have raised security concerns in hardware supply chain. Among all existing solutions, formal verification methods provide powerful solutions in detection malicious behaviors at the pre-silicon stage. However, little work have been done towards built-in hardware runtime verification at the post-silicon stage. In this paper, a runtime formal verification framework is proposed to evaluate the trust of hardware during its execution. This framework combines the symbolic execution and SAT solving methods to validate the user defined properties. The proposed framework has been demonstrated on an FPGA platform using an SoC design with untrusted IPs. The experimentation results show that the proposed approach can provide high-level security assurance for hardware at runtime.},
	booktitle = {2017 {Asian} {Hardware} {Oriented} {Security} and {Trust} {Symposium} ({AsianHOST})},
	author = {Guo, Xiaolong and Dutta, Raj Gautam and He, Jiaji and Jin, Yier},
	month = oct,
	year = {2017},
	keywords = {Hardware, Integrated circuits, Security, trusted computing, security of data, Runtime, formal verification, Foundries, Hardware design languages, hardware runtime verification, high-level security assurance, IP runtime security verification, malicious behavior detection, Mathematical model, PCH framework, post-silicon stage, pre-silicon stage, proof-carrying hardware framework, runtime formal verification framework, SAT solving methods, symbolic execution, untrusted IPs, untrusted third-party vendors},
	pages = {79--84},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\K4KSJ6T8\\8353999.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\YLMAM4K3\\Guo et al. - 2017 - PCH framework for IP runtime security verification.pdf:application/pdf},
}

@inproceedings{coughlin_breaking_2019,
	address = {New York, NY, USA},
	series = {{FPGA} '19},
	title = {Breaking the {Trust} {Dependence} on {Third} {Party} {Processes} for {Reconfigurable} {Secure} {Hardware}},
	isbn = {978-1-4503-6137-8},
	url = {https://doi.org/10.1145/3289602.3293895},
	doi = {10.1145/3289602.3293895},
	abstract = {Modern CPU designs are beginning to incorporate secure hardware features, but leave developers with little control over both the set of features and when and whether updates are available. Reconfigurable logic (e.g., FPGAs) has been proposed as an alternative as it is both hardware, so can have similar capabilities at a reasonable performance degradation, and programmable, allowing customization of the secure hardware. This programmability, however, opens new attack vectors that allow an adversary to re-program the FPGA. Past attempts to solve this rely on a party maintaining a shared key with the FPGA, but these business processes to keep that key secret have been shown to be quite vulnerable. In this paper, we propose a new mechanism which eliminates the trust dependence on third party processes. This new mechanism consists of a self-provisioning stage, where keys are generated internal to the FPGA and never exposed externally, coupled with a secure update mechanism which allows updates to be governed by a policy defined by the secure hardware application. To demonstrate, we fully implemented these mechanisms on a Xilinx Zynq UltraScale+ FPGA along with an example secure co-processor with remote attestation with a flexible root of trust (in contrast to Intel SGX which fixes the root of trust to be Intel). Our performance evaluation of two applications, a password manager and a contact matching application, illustrates using FPGAs is practical.},
	urldate = {2020-08-30},
	booktitle = {Proceedings of the 2019 {ACM}/{SIGDA} {International} {Symposium} on {Field}-{Programmable} {Gate} {Arrays}},
	publisher = {Association for Computing Machinery},
	author = {Coughlin, Aimee and Cusack, Greg and Wampler, Jack and Keller, Eric and Wustrow, Eric},
	month = feb,
	year = {2019},
	keywords = {trusted execution environment, fpga, secure hardware, sgx},
	pages = {282--291},
	file = {Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\SE8QJTRN\\Coughlin et al. - 2019 - Breaking the Trust Dependence on Third Party Proce.pdf:application/pdf},
}

@inproceedings{ye_runtime_2019,
	title = {Runtime {Hardware} {Security} {Verification} {Using} {Approximate} {Computing}: {A} {Case} {Study} on {Video} {Motion} {Detection}},
	shorttitle = {Runtime {Hardware} {Security} {Verification} {Using} {Approximate} {Computing}},
	doi = {10.1109/AsianHOST47458.2019.9006675},
	abstract = {The heterogeneous CPU-FPGA system architecture has been adopted in system-on-chip (SoC), server, and cloud computing platforms to achieve design flexibility and hardware-level performance acceleration. While benefiting the system performance, the newly added FPGA component in the traditional CPU-based computing platforms could result in undetectable system security issues via third-party FPGA IP cores that are produced by untrusted vendors. Traditional hardware and/or software security verification mechanisms do not suffice to address the unique security and runtime performance challenges introduced by the new system architecture. In this paper, we develop a novel approximate computing-based approach to achieve a fast and accurate enough repeated execution for security verification. We implement and evaluate the approximate computing-based security verification framework by conducting a case study on a CPU-FPGA based video motion detection system, in which our experiments on Xilinx Zynq SoC justifies the premium security and low performance overhead obtained by the proposed approach.},
	booktitle = {2019 {Asian} {Hardware} {Oriented} {Security} and {Trust} {Symposium} ({AsianHOST})},
	author = {Ye, Mengmei and Feng, Xianglong and Wei, Sheng},
	month = dec,
	year = {2019},
	keywords = {Hardware, Task analysis, Security, trusted computing, Field programmable gate arrays, cloud computing, system-on-chip, security of data, IP networks, system performance, Runtime, Motion detection, approximate computing, cloud computing platforms, CPU-FPGA based video motion detection system, feature extraction, hardware security verification, hardware-level performance acceleration, heterogeneous CPU-FPGA system architecture, image motion analysis, program verification, runtime hardware security verification, runtime performance, software security verification, third-party FPGA IP cores, undetectable system security issues, untrusted vendors, video signal processing},
	pages = {1--6},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\TU2FTIJN\\9006675.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\C4A73586\\C4A73586.pdf:application/pdf},
}

@inproceedings{tajik_pufmon_2017,
	title = {{PUFMon}: {Security} monitoring of {FPGAs} using physically unclonable functions},
	shorttitle = {{PUFMon}},
	doi = {10.1109/IOLTS.2017.8046216},
	abstract = {Mainstream FPGAs and programmable SoCs employ different countermeasures during configuration and runtime to mitigate physical attacks. However, it has been demonstrated that sophisticated active attack techniques, such as laser voltage probing, can still bypass the bitstream protections during the configuration phase. On the other hand, although the security monitoring IP cores provided by FPGA vendors can ensure the physical security during the runtime of applications, they are unable to detect such attacks during configuration. In this work, we propose a novel approach to using PUFs as physical sensors to monitor the integrity of FPGAs against active attacks. Small modifications in existing PUF architectures enable us to design a PUF-based security scheme, which can be deployed for integrity monitoring and authentication/key generation at the same time. We evaluate the effectiveness of our framework against a range of powerful attacks, such as optical probing and fault attacks. We further discuss how this scheme can be deployed during bitstream configuration in FPGAs with partial reconfiguration capability.},
	booktitle = {2017 {IEEE} 23rd {International} {Symposium} on {On}-{Line} {Testing} and {Robust} {System} {Design} ({IOLTS})},
	author = {Tajik, Shahin and Fietkau, Julian and Lohrke, Heiko and Seifert, Jean-Pierre and Boit, Christian},
	month = jul,
	year = {2017},
	note = {ISSN: 1942-9401},
	keywords = {Circuit faults, Monitoring, Field programmable gate arrays, cryptography, field programmable gate arrays, system-on-chip, Authentication, Runtime, IP, Anti-Tamper, authentication-key generation, bitstream configuration, bitstream protections, configuration phase, fault attacks, FPGA and SoC Security, FPGA security monitoring, integrity monitoring, IP cores, laser voltage probing, Laser Voltage Probing, optical probing, partial reconfiguration capability, physical attack mitigation, physical security, physical sensors, physically unclonable functions, Physically Unclonable Functions, programmable SoCs, PUF architectures, PUF-based security scheme, PUFMon, Sensors, sophisticated active attack techniques},
	pages = {186--191},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\LRT668S9\\8046216.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\DZBR8Q5D\\Tajik et al. - 2017 - PUFMon Security monitoring of FPGAs using physica.pdf:application/pdf},
}

@inproceedings{gundabolu_-chip_2018,
	title = {On-chip {Data} {Security} {Against} {Untrustworthy} {Software} and {Hardware} {IPs} in {Embedded} {Systems}},
	doi = {10.1109/ISVLSI.2018.00122},
	abstract = {State-of-the-art system-on-chip (SoC) field programmable gate arrays (FPGAs) integrate hard powerful ARM processor cores and the reconfigurable logic fabric on a single chip in addition to many commonly needed high performance and high-bandwidth peripherals. The increasing reliance on untrustworthy third-party IP (3PIP) cores, including both hardware and software in FPGA-based embedded systems has made the latter increasingly vulnerable to security attacks. Detection of trojans in 3PIPs is extremely difficult to current static detection methods since there is no golden reference model for 3PIPs. Moreover, many FPGA-based embedded systems do not have the support of security services typically found in operating systems. In this paper, we present our run-time, low-cost, and low-latency hardware and software based solution for protecting data stored in on-chip memory blocks, which has attracted little research attention. The implemented memory protection design consists of a hierarchical top-down structure and controls memory access from software IPs running on the processor and hardware IPs running in the FPGA, based on a set of rules or access rights configurable at run time. Additionally, virtual addressing and encryption of data for each memory help protect confidentiality of data in case of a failure of the memory protection unit, making it hard for the attacker to gain access to the data stored in the memory. The design is implemented and tested on the Intel (Altera) DE1-SoC board featuring a SoC FPGA that integrates a dual-core ARM processor with reconfigurable logic and hundreds of memory blocks. The experimental results and case studies show that the protection model is successful in eliminating malicious IPs from the system without need for reconfiguration of the FPGA. It prevents unauthorized accesses from untrusted IPs, while arbitrating access from trusted IPs generating legal memory requests, without incurring a serious area or latency penalty.},
	booktitle = {2018 {IEEE} {Computer} {Society} {Annual} {Symposium} on {VLSI} ({ISVLSI})},
	author = {Gundabolu, SreeCharan and Wang, Xiaofang},
	month = jul,
	year = {2018},
	note = {ISSN: 2159-3477},
	keywords = {Hardware, Security, Field programmable gate arrays, cryptography, field programmable gate arrays, system-on-chip, security of data, embedded systems, IP networks, microprocessor chips, System-on-chip, 3PIP, dual-core ARM processor, Embedded systems, FPGA-based embedded systems, golden reference model, hierarchical top-down structure, Intel DE1-SoC board, low-latency hardware, memory access, memory protection design, memory protection unit, on-chip memory blocks, reconfigurable logic fabric, security services, SoC FPGA, SoC FPGA, embedded systems, third-party IPs, memory security, implementation, software IP, static detection methods, third-party IP cores},
	pages = {644--649},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\R5925RAI\\8429443.html:text/html},
}

@article{trimberger_fpga_2014,
	title = {{FPGA} {Security}: {Motivations}, {Features}, and {Applications}},
	volume = {102},
	issn = {1558-2256},
	shorttitle = {{FPGA} {Security}},
	doi = {10.1109/JPROC.2014.2331672},
	abstract = {Since their inception, field-programmable gate arrays (FPGAs) have grown in capacity and complexity so that now FPGAs include millions of gates of logic, megabytes of memory, high-speed transceivers, analog interfaces, and whole multicore processors. Applications running in the FPGA include communications infrastructure, digital cinema, sensitive database access, critical industrial control, and high-performance signal processing. As the value of the applications and the data they handle have grown, so has the need to protect those applications and data. Motivated by specific threats, this paper describes FPGA security primitives from multiple FPGA vendors and gives examples of those primitives in use in applications.},
	number = {8},
	journal = {Proceedings of the IEEE},
	author = {Trimberger, Stephen M. and Moore, Jason J.},
	month = aug,
	year = {2014},
	note = {Conference Name: Proceedings of the IEEE},
	keywords = {Computer security, Integrated circuit modeling, Random access memory, Field programmable gate arrays, field programmable gate arrays, Reverse engineering, security of data, FPGA security, field-programmable gate arrays, Nonvolatile memory, logic design, authentication, encryption, analog interfaces, Anti-tamper (AT), communications infrastructure, critical industrial control, digital cinema, field-programmable gate arrays (FPGAs), FPGA vendors, high-performance signal processing, high-speed transceivers, information assurance, logic gates, physically uncloneable function (PUF), Programming, sensitive database access, system on chip (SoC), trust, whole multicore processors},
	pages = {1248--1265},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\ZKQ7KU8A\\6849432.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\FJFH8EK6\\Trimberger and Moore - 2014 - FPGA Security Motivations, Features, and Applicat.pdf:application/pdf},
}

@incollection{vosatka_introduction_2018,
	address = {Cham},
	title = {Introduction to {Hardware} {Trojans}},
	isbn = {978-3-319-68511-3},
	url = {https://doi.org/10.1007/978-3-319-68511-3_2},
	abstract = {Hardware Trojans are a major concern to the overall security and trust of any electronic system. These malicious modifications of circuits are designed to wreak havoc by altering the intended behavior of the system. When triggered, Trojans adversely affect electronics leading to reduced reliability, system failure, remote access into hardware, sensitive information leakage, and damage to a company’s reputation. Hardware Trojans are specifically designed to be rarely activated and undetectable to conventional testing practices and verification methodologies. Trojans can be hidden in many electronic components of integrated circuits (IC), field-programmable gate arrays (FPGA), system-on-chips (SoC), application-specific integrated circuits (ASIC), and third-party intellectual property (3PIP). They can be inserted by adversarial entities including untrusted foundries, designers, vendors, as well as electronic design automation (EDA) and computer-aided design (CAD) software tool suites. The emergence of hardware Trojans has discredited the common argument that hardware is always safe and trustworthy. This chapter provides a detailed insight into hardware Trojans including models, triggers, payloads, attacks, countermeasures, as well as the need to incorporate security through the entire hardware design flow and life cycle of ICs within the global supply chain.},
	language = {en},
	urldate = {2020-08-18},
	booktitle = {The {Hardware} {Trojan} {War}: {Attacks}, {Myths}, and {Defenses}},
	publisher = {Springer International Publishing},
	author = {Vosatka, Jason},
	editor = {Bhunia, Swarup and Tehranipoor, Mark M.},
	year = {2018},
	doi = {10.1007/978-3-319-68511-3_2},
	keywords = {Hardware Trojan, Trojan Attacks, Trojan Detection, Trojan Insertion, Untrusted Foundry},
	pages = {15--51},
	file = {Springer Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\XMQPHWM2\\Vosatka - 2018 - Introduction to Hardware Trojans.pdf:application/pdf},
}

@phdthesis{collins_hardware_2019,
	title = {Hardware {Trojans} in {FPGA} {Device} {IP}: {Solutions} {Through} {Evolutionary} {Computation}},
	shorttitle = {Hardware {Trojans} in {FPGA} {Device} {IP}},
	url = {https://etd.ohiolink.edu/pg_10?0::NO:10:P10_ACCESSION_NUM:ucin1554217182155068},
	language = {en},
	urldate = {2020-08-18},
	school = {University of Cincinnati},
	author = {Collins, Zachary},
	year = {2019},
	file = {Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\KFP7CAY6\\Collins - 2019 - Hardware Trojans in FPGA Device IP Solutions Thro.pdf:application/pdf;Snapshot:C\:\\Users\\sgdon\\Zotero\\storage\\4XFXIL9H\\pg_10.html:text/html},
}

@article{mal-sarkar_design_2016,
	title = {Design and {Validation} for {FPGA} {Trust} under {Hardware} {Trojan} {Attacks}},
	volume = {2},
	issn = {2332-7766},
	doi = {10.1109/TMSCS.2016.2584052},
	abstract = {Field programmable gate arrays (FPGAs) are being increasingly used in a wide range of critical applications, including industrial, automotive, medical, and military systems. Since FPGA vendors are typically fabless, it is more economical to outsource device production to off-shore facilities. This introduces many opportunities for the insertion of malicious alterations of FPGA devices in the foundry, referred to as hardware Trojan attacks, that can cause logical and physical malfunctions during field operation. The vulnerability of these devices to hardware attacks raises serious security concerns regarding hardware and design assurance. In this paper, we present a taxonomy of FPGA-specific hardware Trojan attacks based on activation and payload characteristics along with Trojan models that can be inserted by an attacker. We also present an efficient Trojan detection method for FPGA based on a combined approach of logic-testing and side-channel analysis. Finally, we propose a novel design approach, referred to as Adapted Triple Modular Redundancy (ATMR), to reliably protect against Trojan circuits of varying forms in FPGA devices. We compare ATMR with the conventional TMR approach. The results demonstrate the advantages of ATMR over TMR with respect to power overhead, while maintaining the same or higher level of security and performances as TMR. Further improvement in overhead associated with ATMR is achieved by exploiting reconfiguration and time-sharing of resources.},
	number = {3},
	journal = {IEEE Transactions on Multi-Scale Computing Systems},
	author = {Mal-Sarkar, Sanchita and Karam, Robert and Narasimhan, Seetharam and Ghosh, Anandaroop and Krishna, Aswin and Bhunia, Swarup},
	month = jul,
	year = {2016},
	note = {Conference Name: IEEE Transactions on Multi-Scale Computing Systems},
	keywords = {Hardware, side-channel analysis, Trojan horses, Security, Field programmable gate arrays, cryptography, field programmable gate arrays, FPGA trust, Payloads, Foundries, adapted triple modular redundancy, ATMR, FPGA devices, FPGA-specific hardware Trojan attacks, logic testing, logic-testing, resources time-sharing, Trojan detection method, Trojan models},
	pages = {186--198},
	file = {Full Text:C\:\\Users\\sgdon\\Zotero\\storage\\ZPEXCU4C\\Mal-Sarkar et al. - 2016 - Design and Validation for FPGA Trust under Hardwar.pdf:application/pdf;IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\M75ARJCK\\7497464.html:text/html},
}

@article{zhang_recent_2019-1,
	title = {Recent {Attacks} and {Defenses} on {FPGA}-based {Systems}},
	volume = {12},
	issn = {1936-7406},
	url = {https://doi.org/10.1145/3340557},
	doi = {10.1145/3340557},
	abstract = {Field-programmable gate array (FPGA) is a kind of programmable chip that is widely used in many areas, including automotive electronics, medical devices, military and consumer electronics, and is gaining more popularity. Unlike the application specific integrated circuits (ASIC) design, an FPGA-based system has its own supply-chain model and design flow, which brings interesting security and trust challenges. In this survey, we review the security and trust issues related to FPGA-based systems from the market perspective, where we model the market with the following parties: FPGA vendors, foundries, IP vendors, EDA tool vendors, FPGA-based system developers, and end-users. For each party, we show the security and trust problems they need to be aware of and the associated solutions that are available. We also discuss some challenges and opportunities in the security and trust of FPGA-based systems used in large-scale cloud and datacenters.},
	number = {3},
	urldate = {2020-08-18},
	journal = {ACM Transactions on Reconfigurable Technology and Systems},
	author = {Zhang, Jiliang and Qu, Gang},
	month = aug,
	year = {2019},
	keywords = {hardware security, FPGA security, FPGA trust},
	pages = {14:1--14:24},
	file = {Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\K5PI97H4\\Zhang and Qu - 2019 - Recent Attacks and Defenses on FPGA-based Systems.pdf:application/pdf},
}

@inproceedings{jung_secure_2020,
	title = {A {Secure} {Platform} for {IoT} {Devices} based on {ARM} {Platform} {Security} {Architecture}},
	doi = {10.1109/IMCOM48794.2020.9001713},
	abstract = {Recent IoT services are being used in various fields such as smart homes, smart factories, smart cars and industrial systems. These various IoT services are implemented through hyper-connected IoT devices, and accordingly, security requirements of these devices are being highlighted. In order to satisfy the security requirements of IoT devices, various studies have been conducted such as HSM, Security SoC, and TrustZone. In particular, ARM proposed Platform Security Architecture (PSA), which is a security architecture that provide execution isolation to safely manage and protect the computing resources of low- end IoT devices. PSA can ensure confidentiality and integrity of IoT devices based on its structural features, but conversely, it has the problem of increasing development difficulty in using the security functions of PSA. To solve this problem, this paper analyzes the security requirements of an IoT platform and proposes secure platform based on PSA. To evaluate the proposed secure platform, a PoC implementation is provided based on hardware prototype consisting of FPGA. Our experiments with the PoC implementation verify that the proposed secure platform offers not only high security but also convenience of application development for IoT devices.},
	booktitle = {2020 14th {International} {Conference} on {Ubiquitous} {Information} {Management} and {Communication} ({IMCOM})},
	author = {Jung, Junyoung and Cho, Jinsung and Lee, Ben},
	month = jan,
	year = {2020},
	keywords = {Computer architecture, Hardware, TrustZone, Security, Cryptography, security of data, Program processors, Internet of Things, IoT, ARM platform security architecture, hyper-connected IoT devices, IoT platform, IoT services, Machine-to-machine communications, Microprogramming, PSA, secure platform, security functions, Security service},
	pages = {1--4},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\9492HGC8\\9001713.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\YX6IBTEC\\Jung et al. - 2020 - A Secure Platform for IoT Devices based on ARM Pla.pdf:application/pdf},
}

@article{benhani_security_2019,
	title = {The {Security} of {ARM} {TrustZone} in a {FPGA}-{Based} {SoC}},
	volume = {68},
	issn = {1557-9956},
	doi = {10.1109/TC.2019.2900235},
	abstract = {Cybersecurity of embedded systems has become a major challenge for the development of the Internet of Things, of Cloud computing and other trendy applications without devoting a significant part of the design budget to industrial players. Technologies like TrustZone, provided by ARM, support a Trusted Execution Environment (TEE) software architecture and are inexpensive integrated solutions. While this technology allows isolation and secure execution of critical software applications (e.g., banking), recent preliminary works highlighted some security breaches or limitations when the ARM processors are embedded in a FPGA-based heterogeneous SoCs such as the Xilinx Zynq or Intel SoC FPGA devices. This paper highlights the security issue of such complex SoCs and details six efficient attacks on the ARM TrustZone extension in the SoC. A prototype system design on a Xilinx Zynq SoC is the target of the attacks presented in this paper but they could be adapted to other SoCs. This paper also includes recommendations and security solutions to design a trustworthy embedded system with a FPGA-based heterogeneous SoC.},
	number = {8},
	journal = {IEEE Transactions on Computers},
	author = {Benhani, E. M. and Bossuet, L. and Aubert, A.},
	month = aug,
	year = {2019},
	note = {Conference Name: IEEE Transactions on Computers},
	keywords = {Hardware, trusted execution environment, ARM TrustZone, Security, trusted computing, Field programmable gate arrays, cloud computing, field programmable gate arrays, FPGA Security, system-on-chip, embedded systems, IP networks, Program processors, Internet of Things, ARM processors, ARM TrustZone extension, embedded system design, Fabrics, FPGA-based heterogeneous SoC, Intel SoC FPGA devices, security issue, software architecture, TEE software architecture, trustworthy embedded system, Xilinx Zynq SoC},
	pages = {1238--1248},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\TGRUCI34\\8643768.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\PDG4L863\\Benhani et al. - 2019 - The Security of ARM TrustZone in a FPGA-Based SoC.pdf:application/pdf},
}

@inproceedings{benhani_security_2017,
	title = {On the security evaluation of the {ARM} {TrustZone} extension in a heterogeneous {SoC}},
	doi = {10.1109/SOCC.2017.8226018},
	abstract = {As the complexity of System-on-Chip (SoC) and the reuse of third party IP continues to grow, the security of a heterogeneous SoC has become a critical issue. In order to increase the software security of such SoC, the TrustZone technology has been proposed by ARM to enforce software security. Nevertheless, many SoC embed non-trusted third party Intellectual Property (IP) trying to take the benefits of this technology. In such case, is the security guaranteed by the ARM TrustZone technology reduced by the heterogeneity of SoC? In order to answer to this question, this paper presents relevant attack scenarios based on third party IP to exploit some security failures of the TrustZone extension through the all SoC. At the end, this article proposes to SoC designers to consider some design solutions to limit the impact of a malicious IP.},
	booktitle = {2017 30th {IEEE} {International} {System}-on-{Chip} {Conference} ({SOCC})},
	author = {Benhani, El Mehdi and Marchand, Cedric and Aubert, Alain and Bossuet, Lilian},
	month = sep,
	year = {2017},
	note = {ISSN: 2164-1706},
	keywords = {Hardware, Trojan horses, ARM TrustZone, Security, trusted computing, Field programmable gate arrays, industrial property, system-on-chip, security of data, IP networks, Hardware Trojan, party IP, integrated circuit design, System-on-chip, ARM TrustZone extension, AXI bus, Embedded system security, heterogeneous SoC, party intellectual property, security evaluation, security failures, SoC designers, software security, system-on-chip complexity},
	pages = {108--113},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\QT2FW59E\\8226018.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\8ILKTVL2\\Benhani et al. - 2017 - On the security evaluation of the ARM TrustZone ex.pdf:application/pdf},
}

@inproceedings{ray_correctness_2015,
	title = {Correctness and security at odds: {Post}-silicon validation of modern {SoC} designs},
	shorttitle = {Correctness and security at odds},
	doi = {10.1145/2744769.2754896},
	abstract = {We consider the conflicts between requirements from security and post-silicon validation in SoC designs. Post-silicon validation requires hardware instrumentations to provide observability and controllability during on-field execution; this in turn makes the system prone to security vulnerabilities, resulting in potentially subtle security exploits. Mitigating such threats while ensuring that the system is amenable to post-silicon validation is challenging, involving close collaboration among security, validation, testing, and computer architecture teams. We examine the state of the practice in this area, the trade-offs and compromises made, and their limitations. We also discuss an emerging approach that we are contemplating to address this problem.},
	booktitle = {2015 52nd {ACM}/{EDAC}/{IEEE} {Design} {Automation} {Conference} ({DAC})},
	author = {Ray, Sandip and Jin Yang and Basak, Abhishek and Bhunia, Swarup},
	month = jun,
	year = {2015},
	note = {ISSN: 0738-100X},
	keywords = {Hardware, Security, system-on-chip, IP networks, computer architecture, System-on-chip, controllability, hardware instrumentation, Instruments, modern SoC design, observability, Observability, post-silicon validation, Silicon},
	pages = {1--6},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\HK8GKV6R\\7167332.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\T54ID8F7\\Ray et al. - 2015 - Correctness and security at odds Post-silicon val.pdf:application/pdf},
}

@inproceedings{hategekimana_shielding_2017,
	title = {Shielding non-trusted {IPs} in {SoCs}},
	doi = {10.23919/FPL.2017.8056848},
	abstract = {This paper explores the use of hardware sand-boxes, conceptually similar to software sandboxes, for secure integration of non-trusted IPs in systems-on-chip (SoC) designs. The goal of the hardware sandbox is to only allow permissible interactions between the IP and the rest of the system. The hardware sandbox design achieves this by exposing the IP interface to isolated virtual resources and checking IP signals' "correctness" at run-time. We evaluated the hardware sandbox through a real world design implementation. Our sandbox can detect a majority of Trust-Hub.org Trojan benchmarks with a negligible increase in resource overhead.},
	booktitle = {2017 27th {International} {Conference} on {Field} {Programmable} {Logic} and {Applications} ({FPL})},
	author = {Hategekimana, Festus and Whitaker, Taylor and Pantho, Md Jubaer Hossain and Bobda, Christophe},
	month = sep,
	year = {2017},
	note = {ISSN: 1946-1488},
	keywords = {Hardware, invasive software, Trojan horses, Security, system-on-chip, SoC, Protocols, IP networks, computer network security, Automata, Benchmark testing, Component Authentication Process, Hardware sandbox, hardware sandboxes, IP interface, isolated virtual resources, nontrusted IP shielding, Secure Execution, software sandboxes, Systems-on-Chip (SoC), systems-on-chip design, Trojan, Trust-Hub.org Trojan benchmarks, virtualisation},
	pages = {1--4},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\SVJ7YBWX\\8056848.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\U5H3N56J\\Hategekimana et al. - 2017 - Shielding non-trusted IPs in SoCs.pdf:application/pdf},
}

@inproceedings{duncan_fpga_2019-1,
	title = {{FPGA} {Bitstream} {Security}: {A} {Day} in the {Life}},
	shorttitle = {{FPGA} {Bitstream} {Security}},
	doi = {10.1109/ITC44170.2019.9000145},
	abstract = {Security concerns for field-programmable gate array (FPGA) applications and hardware are evolving as FPGA designs grow in complexity, involve sophisticated intellectual properties (IPs), and pass through more entities in the design and implementation flow. FPGAs are now routinely found integrated into system-on-chip (SoC) platforms, cloud-based shared computing resources, and in commercial and government systems. The IPs included in FPGAs are sourced from multiple origins and passed through numerous entities (such as design house, system integrator, and users) through the lifecycle. This paper thoroughly examines the interaction of these entities from the perspective of the bitstream file responsible for the actual hardware configuration of the FPGA. Five stages of the bitstream lifecycle are introduced to analyze this interaction: 1) bitstream-generation, 2) bitstream-at-rest, 3) bitstream-loading, 4) bitstream-running, and 5) bitstream-end-of-life. Potential threats and vulnerabilities are discussed at each stage, and both vendor-offered and academic countermeasures are highlighted for a robust and comprehensive security assurance.},
	booktitle = {2019 {IEEE} {International} {Test} {Conference} ({ITC})},
	author = {Duncan, Adam and Rahman, Fahim and Lukefahr, Andrew and Farahmandi, Farimah and Tehranipoor, Mark},
	month = nov,
	year = {2019},
	note = {ISSN: 2378-2250},
	keywords = {security, bitstream file, bitstream lifecycle, Bitstream Protection, Encryption, field programmable gate arrays, FPGA bitstream security, FPGA designs, FPGA Security, industrial property, intellectual properties, IPs, reconfigurable architectures, security concerns, SoC platform, system integrator, system-on-chip, system-on-chip platforms},
	pages = {1--10},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\K2EDBJFM\\9000145.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\UMM8JSMH\\Duncan et al. - 2019 - FPGA Bitstream Security A Day in the Life.pdf:application/pdf},
}

@inproceedings{peeters_soc_2015,
	title = {{SoC} security architecture: {Current} practices and emerging needs},
	shorttitle = {{SoC} security architecture},
	doi = {10.1145/2744769.2747943},
	abstract = {At the era of everything is connected, security has become an essential key question when starting a new System-on-chip architecture. With the proliferation of secure systems, it is expected that many design teams will lack the essential knowledge and time to look at the abundant literature. In this paper, we intend to provide a reasonable approach to tackle this problem and try to convey the essential design rules, design elements and threats to any reader. We cover a possible methodology to collect requirements based on a systematic identification of the assets needing protection and threats against these assets: and make sure the design is appropriately sized and adequately secure. Once the requirements have been collected, the architecture can be laid out and we discuss the main elements that can compose it: trusted execution environment, secure boot, secure software update, secure design-for-test (DFT) components, Random Number Generation (RNG).},
	booktitle = {2015 52nd {ACM}/{EDAC}/{IEEE} {Design} {Automation} {Conference} ({DAC})},
	author = {Peeters, Eric},
	month = jun,
	year = {2015},
	note = {ISSN: 0738-100X},
	keywords = {Computer architecture, trusted execution environment, Software, Random access memory, Cryptography, system-on-chip, secure boot, security of data, integrated circuit design, System-on-chip, Computer hacking, design elements, design rules, DFT components, random number generation, RNG, secure design-for-test components, secure software update, SoC security architecture, system-on-chip architecture, systematic identification},
	pages = {1--6},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\HFHYHKR2\\7167330.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\4MFN8467\\Peeters - 2015 - SoC security architecture Current practices and e.pdf:application/pdf},
}

@article{ray_system--chip_2018,
	title = {System-on-{Chip} {Platform} {Security} {Assurance}: {Architecture} and {Validation}},
	volume = {106},
	issn = {1558-2256},
	shorttitle = {System-on-{Chip} {Platform} {Security} {Assurance}},
	doi = {10.1109/JPROC.2017.2714641},
	abstract = {Modern system-on-chip (SoC) designs include a wide variety of highly sensitive assets which must be protected from unauthorized access. A significant aspect of SoC design involves exploration, analysis, and evaluation of resiliency mechanisms against attacks to such assets. These attacks may arise from a number of sources, including malicious intellectualproperty blocks (IPs) in the hardware, malicious or vulnerable firmware and software, insecure communication of the system with other devices, and side-channel vulnerabilities through power and performance profiles. Countermeasures for these attacks are equally diverse, which include architecture, design, implementation, and validation-based protection. In this paper, we provide a comprehensive overview of the security infrastructure in modern SoC designs, including both resiliency techniques and their validation paradigms at presilicon and postsilicon stages. We identify gaps in current resiliency and analysis architectures and propose design and validation solutions to address them. Finally, we provide industry perspectives on the role and impact of current practices on SoC security, and discuss some emerging trends in this important area.},
	number = {1},
	journal = {Proceedings of the IEEE},
	author = {Ray, Sandip and Peeters, Eric and Tehranipoor, Mark M. and Bhunia, Swarup},
	month = jan,
	year = {2018},
	note = {Conference Name: Proceedings of the IEEE},
	keywords = {Computer architecture, Computer security, security, Security, system-on-chip, integrated circuit design, SoC design, System-on-chip, Safety, untrusted IPs, Complexity theory, Cyber-physical systems, insecure communication, malicious intellectualproperty blocks, modern SoC designs, resiliency mechanisms, resiliency techniques, Security architecture, security infrastructure, security policy, side-channel vulnerabilities, SoC security, Supply chains, system-on-chip (SoC) security, system-on-chip designs, system-on-chip platform security assurance, trusted SoC, unauthorized access, validation paradigms, validation-based protection},
	pages = {21--37},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\F7VMYKEN\\7987680.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\TRDAYNSS\\Ray et al. - 2018 - System-on-Chip Platform Security Assurance Archit.pdf:application/pdf},
}

@inproceedings{pocklassery_self-authenticating_2018,
	title = {Self-authenticating secure boot for {FPGAs}},
	doi = {10.1109/HST.2018.8383919},
	abstract = {Secure boot within an FPGA environment is traditionally implemented using hardwired embedded cryptographic primitives and NVM-based keys, whereby an encrypted bitstream is decrypted as it is loaded from an external storage medium, e.g., Flash memory. A novel technique is proposed in this paper that self-authenticates an unencrypted FPGA configuration bitstream loaded into the FPGA during startup. The power-on process of an FPGA loads an unencrypted bitstream into the programmable logic portion which embeds the self-authenticating PUF architecture. Challenges are applied to the components of the PUF engine both as a means of generating a key and performing self-authentication. Any modifications made to the PUF architecture results in key generation failure, and failure of subsequent stages of the secure boot process. The generated key is used in the second stage of the boot process to decrypt the programmable logic portion of the design as well as components of the software, e.g., Linux operating system and applications, that run on the processor side of the FPGA.},
	booktitle = {2018 {IEEE} {International} {Symposium} on {Hardware} {Oriented} {Security} and {Trust} ({HOST})},
	author = {Pocklassery, G. and Che, W. and Saqib, F. and Areno, M. and Plusquellic, J.},
	month = apr,
	year = {2018},
	keywords = {Software, Field programmable gate arrays, cryptography, Cryptography, field programmable gate arrays, Engines, Authentication, decryption, flash memory, hardwired embedded cryptographic primitives, key generation failure, Linux, Linux operating system, NVM-based keys, programmable logic portion, self-authenticating PUF architecture, self-authenticating secure boot process, unencrypted FPGA configuration},
	pages = {221--226},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\2XY69MPJ\\8383919.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\AT5K7T65\\Pocklassery et al. - 2018 - Self-authenticating secure boot for FPGAs.pdf:application/pdf},
}

@inproceedings{duncan_repurposing_2018,
	title = {Repurposing {SoC} analog circuitry for additional {COTS} hardware security},
	doi = {10.1109/HST.2018.8383915},
	abstract = {This paper introduces a new methodology to generate additional hardware security in commercial off-the-shelf (COTS) system-on-a-chip (SoC) integrated circuits (ICs) that have already been fabricated and packaged. On-chip analog hardware blocks such as analog to digital converters (ADCs), digital to analog converters (DACs) and comparators residing within an SoC are repurposed and connected to one another to generate unique physically unclonable function (PUF) responses. The PUF responses are digitized and processed on-chip to create keys for use in encryption and device authentication activities. Key generation and processing algorithms are presented that minimize the effects of voltage and temperature fluctuations to maximize the repeatability of a key within a device. Experimental results utilizing multiple on-chip analog blocks inside a common COTS microcontroller show reliable key generation with minimal overhead.},
	booktitle = {2018 {IEEE} {International} {Symposium} on {Hardware} {Oriented} {Security} and {Trust} ({HOST})},
	author = {Duncan, Adam and Jiang, Lei and Swany, Martin},
	month = apr,
	year = {2018},
	keywords = {Hardware, microcontrollers, Security, hardware security, cryptography, system-on-chip, encryption, System-on-chip, ADC, additional COTS hardware security, analog to digital converters, analogue-digital conversion, commercial off-the-shelf system-on-a-chip integrated circuits, common COTS microcontroller, comparators, COTS security, DAC, device authentication activities, digital to analog converters, digital-analogue conversion, Microcontrollers, on-chip analog blocks, on-chip analog hardware blocks, physically unclonable function responses, processing algorithms, PUF responses, reliable key generation, repurposing SoC analog circuitry, Semiconductor device measurement, temperature fluctuations, Temperature measurement, trusted microelectronics},
	pages = {201--204},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\FZRC2HGB\\8383915.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\GWQGTQ5Z\\Duncan et al. - 2018 - Repurposing SoC analog circuitry for additional CO.pdf:application/pdf},
}

@inproceedings{hategekimana_hardwaresoftware_2016,
	title = {Hardware/{Software} {Isolation} and {Protection} {Architecture} for {Transparent} {Security} {Enforcement} in {Networked} {Devices}},
	doi = {10.1109/ISVLSI.2016.32},
	abstract = {We present an integrated hardware/software architectureto enforce security in networked workstations andembedded devices such as printers and microscopes. Thesedevices are usually connected to the Internet without protection, so they are exposed to attack. Our solution operatesas an intermediate isolation and protection module (IPM) between the network and the device to be protected. TheIPM can be implemented as a dedicated IP on a system-onchip, or as a separate chip to analyze incoming and outgoingtraffic for malicious activities, in a transparent way to thedevice under protection. Security enforcement is performedin two stages. A deep packet inspection module is used inthe first stage to detect and drop packets originating fromknown blacklisted domains or carrying malware patterns, simultaneously important features from protocol-conformingpackets are extracted and sent to a binary classifier for furtherprocessing and decision making. The second stage uses a binaryclassifier to make decisions on seemingly protocol-conformingpackets. We designed and implemented a prototype of theIPM as a system-on-FPGA, with packet filtering and analysisaccelerated in hardware, and binary classification and decisionmaking in software. The IPM operates at high-speed witha very small footprint, suitable for embedded devices withfewer resources. Evaluation of our prototype using the 1999Knowledge Discovery in Databases (KDD Cup 1999 dataset) benchmarks shows a high detection rate on various distributeddenial-of-service (DDoS) attacks such as Neptune DoS (99.3\%),Smurf DoS (100\%), and Teardrop DoS (98.90\%).},
	booktitle = {2016 {IEEE} {Computer} {Society} {Annual} {Symposium} on {VLSI} ({ISVLSI})},
	author = {Hategekimana, Festus and Nardin, Pierre and Bobda, Christophe},
	month = jul,
	year = {2016},
	note = {ISSN: 2159-3477},
	keywords = {invasive software, Internet, Field programmable gate arrays, field programmable gate arrays, system-on-chip, embedded systems, Servers, Performance evaluation, Feature extraction, computer network security, 1999 Knowledge Discovery in Databases, binary classifier, Computer crime, DDoS attacks, decision making, deep packet inspection module, distributed denial-of-service, Distributed Denial-of-Service (DDoS), embedded devices, Field Programmable Gate Arrays (FPGAs), Hardware-Based Isolation and Protection, hardware-software codesign, integrated hardware architecture, integrated software architecture, intermediate isolation and protection module, IPM implementation, KDD Cup 1999 dataset, malware patterns, networked devices, packet features extraction, packet filtering, Pattern matching, Pattern Matching, protection architecture, protocol-conforming packets, Receiver-Operating Characteristics (ROC), Signaturebased Detection, Support Vector Machines (SVMs), system-on chip, system-on-FPGA, transparent security enforcement},
	pages = {140--145},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\W4CQWEUF\\7560187.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\FFPF9K9T\\Hategekimana et al. - 2016 - HardwareSoftware Isolation and Protection Archite.pdf:application/pdf},
}

@article{basak_security_2017,
	title = {Security {Assurance} for {System}-on-{Chip} {Designs} {With} {Untrusted} {IPs}},
	volume = {12},
	issn = {1556-6021},
	doi = {10.1109/TIFS.2017.2658544},
	abstract = {Modern system-on-chip (SoC) designs involve integration of a large number of intellectual property (IP) blocks, many of which are acquired from untrusted third-party vendors. An IP containing a security vulnerability-whether inadvertent or malicious-may compromise the trustworthiness of the entire SoC, e.g., by leaking sensitive information or causing execution failures at key points. Existing functional validation approaches, post-manufacturing tests, and IP trust verification techniques are inadequate to accomplish comprehensive system-level security assurance in the presence of untrusted IPs. In this paper, we analyze security issues at the SoC level caused by untrusted IPs. We also propose a novel, resilient SoC security architecture to ensure trusted SoC operation with untrusted IPs. Our architecture realizes fine-grained IP-trust aware security policies in an efficient security policy checker that enables run-time monitoring of security issues arising from untrusted IPs. It also exploits on-chip design-for-debug architecture to ensure trusted information flow from IP blocks to the security policy checker. Unlike existing solutions to the untrusted IP problem, which rely on verification of IP trust before they are integrated into an SoC, the proposed approach follows a fundamentally different architecture-level solution based on run-time resilience. We demonstrate the effectiveness of this framework for system protection using several illustrative practical use cases. We also provide experimental results to show that the overhead of the proposed architecture is modest on representative SoC designs.},
	number = {7},
	journal = {IEEE Transactions on Information Forensics and Security},
	author = {Basak, Abhishek and Bhunia, Swarup and Tkacik, Thomas and Ray, Sandip},
	month = jul,
	year = {2017},
	note = {Conference Name: IEEE Transactions on Information Forensics and Security},
	keywords = {Computer architecture, Hardware, invasive software, Trojan horses, hardware trojan, Registers, Security, trusted computing, industrial property, system-on-chip, IP networks, Hardware Trojan, untrusted IPs, security policy, SoC security, system-on-chip designs, design-for-debug, on-chip design-for-debug architecture, Resilience, resilient architecture, security assurance, security wrapper, SoC designs, Trusted SoC, untrusted intellectual property, untrusted IP},
	pages = {1515--1528},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\FIFDMKGP\\7833075.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\G4GUJ46D\\Basak et al. - 2017 - Security Assurance for System-on-Chip Designs With.pdf:application/pdf},
}

@article{meng_built-security_2020,
	title = {Built-in {Security} {Computer}: {Deploying} {Security}-first {Architecture} {Using} {Active} {Security} {Processor}},
	issn = {1557-9956},
	shorttitle = {Built-in {Security} {Computer}},
	doi = {10.1109/TC.2020.3011748},
	abstract = {Continually disclosed vulnerabilities reveal that traditional computer architecture lacks the consideration of security. This paper proposes a security-first architecture, with the Active Security Processor (ASP) integrated to the conventional computer architectures. To reduce the attack surface of ASP and improve the security of the whole system, the ASP is physically isolated from the CPUs with an asymmetric address space. Both the ASP and CPU can run their own operating system and applications independently on their own memory space. Furthermore, the ASP has the highest privilege (Super Root) of the whole system with two features. Firstly, the ASP can access all CPU resources and collect multi-dimensional information efficiently to monitor and analyze malicious behaviors. However, the CPU cannot access the ASP resources in anyway. Secondly, instead of being scheduled by CPUs, the ASP can actively manage the security mechanisms employed in either CPUs or the ASP. Based on the security-first architecture, we introduce several typical security tasks running on ASP. With considerations of complexity and performance, we discuss four typical system-level implementation for integrating the ASP to the security-first architecture. We implemented an off-chip ASP as our first-generation security computer system design solution to evaluate the security and performance in real hardware.},
	journal = {IEEE Transactions on Computers},
	author = {Meng, Dan and Hou, Rui and Shi, Gang and Tu, Bibo and Yu, Aimin and Zhu, Ziyuan and Jia, Xiaoqi and Wen, Yu and Yang, Yun},
	year = {2020},
	note = {Conference Name: IEEE Transactions on Computers},
	keywords = {Computer architecture, Active Security Processor, Asymmetric Address Space, Central Processing Unit, Computer security, Hardware, Operating systems, Security-first Architecture, Task analysis, Uni-directional Physical Isolation},
	pages = {1--1},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\3E5I6WK8\\9146995.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\GMU7HTFJ\\Meng et al. - 2020 - Built-in Security Computer Deploying Security-fir.pdf:application/pdf},
}

@inproceedings{zeitouni_trusted_2021,
	title = {Trusted {Configuration} in {Cloud} {FPGAs}},
	doi = {10.1109/FCCM51124.2021.00036},
	abstract = {In this paper we tackle the open paradoxical challenge of FPGA-accelerated cloud computing: On one hand, clients aim to secure their Intellectual Property (IP) by encrypting their configuration bitstreams prior to uploading them to the cloud. On the other hand, cloud service providers disallow the use of encrypted bitstreams to mitigate rogue configurations from damaging or disabling the FPGA. Instead, cloud providers require a verifiable check on the hardware design that is intended to run on a cloud FPGA at the netlist-level before generating the bitstream and loading it onto the FPGA, therefore, contradicting the IP protection requirement of clients. Currently, there exist no practical solution that can adequately address this challenge.We present the first practical solution that, under reasonable trust assumptions, satisfies the IP protection requirement of the client and provides a bitstream sanity check to the cloud provider. Our proof-of-concept implementation uses existing tools and commodity hardware. It is based on a trusted FPGA shell that utilizes less than 1\% of the FPGA resources on a Xilinx VCU118 evaluation board, and an Intel SGX machine running the design checks on the client bitstream.},
	booktitle = {2021 {IEEE} 29th {Annual} {International} {Symposium} on {Field}-{Programmable} {Custom} {Computing} {Machines} ({FCCM})},
	author = {Zeitouni, Shaza and Vliegen, Jo and Frassetto, Tommaso and Koch, Dirk and Sadeghi, Ahmad-Reza and Mentens, Nele},
	month = may,
	year = {2021},
	note = {ISSN: 2576-2621},
	keywords = {Hardware, Cryptography, Protocols, Bitstream protection, Cloud computing, Cloud FPGA Security, Intellectual property, IP Protection, Loading, Rogue Circuits Detection, Tools},
	pages = {233--241},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\3PHQBRDZ\\9443664.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\5KDX9XKE\\5KDX9XKE.pdf:application/pdf},
}

@article{zeitouni_sok_2020,
	title = {{SoK}: {On} the {Security} {Challenges} and {Risks} of {Multi}-{Tenant} {FPGAs} in the {Cloud}},
	shorttitle = {{SoK}},
	url = {http://arxiv.org/abs/2009.13914},
	abstract = {In their continuous growth and penetration into new markets, Field Programmable Gate Arrays (FPGAs) have recently made their way into hardware acceleration of machine learning among other specialized compute-intensive services in cloud data centers, such as Amazon and Microsoft. To further maximize their utilization in the cloud, several academic works propose the spatial multi-tenant deployment model, where the FPGA fabric is simultaneously shared among mutually mistrusting clients. This is enabled by leveraging the partial reconfiguration property of FPGAs, which allows to split the FPGA fabric into several logically isolated regions and reconfigure the functionality of each region independently at runtime. In this paper, we survey industrial and academic deployment models of multi-tenant FPGAs in the cloud computing settings, and highlight their different adversary models and security guarantees, while shedding light on their fundamental shortcomings from a security standpoint. We further survey and classify existing academic works that demonstrate a new class of remotely exploitable physical attacks on multi-tenant FPGA devices, where these attacks are launched remotely by malicious clients sharing physical resources with victim users. Through investigating the problem of end-to-end multi-tenant FPGA deployment more comprehensively, we reveal how these attacks actually represent only one dimension of the problem, while various open security and privacy challenges remain unaddressed. We conclude with our insights and a call for future research to tackle these challenges.},
	urldate = {2021-08-26},
	journal = {arXiv:2009.13914 [cs]},
	author = {Zeitouni, Shaza and Dessouky, Ghada and Sadeghi, Ahmad-Reza},
	month = oct,
	year = {2020},
	note = {arXiv: 2009.13914},
	keywords = {Computer Science - Cryptography and Security},
	file = {arXiv Fulltext PDF:C\:\\Users\\sgdon\\Zotero\\storage\\796BTH74\\796BTH74.pdf:application/pdf;arXiv.org Snapshot:C\:\\Users\\sgdon\\Zotero\\storage\\8UWRS2NC\\2009.html:text/html},
}

@inproceedings{bag_cryptographically_2020,
	address = {Cham},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Cryptographically {Secure} {Multi}-tenant {Provisioning} of {FPGAs}},
	isbn = {978-3-030-66626-2},
	doi = {10.1007/978-3-030-66626-2_11},
	abstract = {Field-programmable gate arrays (FPGAs) have gained massive popularity today as accelerators for a variety of workloads, including big data analytics, and parallel and distributed computing. This has fueled the study of mechanisms to provision FPGAs among multiple tenants as general purpose computing resources on the cloud. Such mechanisms offer new challenges, such as ensuring IP protection and bitstream confidentiality for mutually distrusting clients sharing the same FPGA. A direct adoption of existing IP protection techniques from the single tenancy setting do not completely address these challenges, and are also not scalable enough for practical deployment.In this paper, we propose a dedicated and scalable framework for secure multi-tenant FPGA provisioning that can be easily integrated into existing cloud-based infrastructures such as OpenStack. Our technique has constant resource/memory overhead irrespective of the number of tenants sharing a given FPGA, and is provably secure under well-studied cryptographic assumptions. A prototype implementation of our proposition on Xilinx Virtex-7 FPGAs is presented to validate its overheads and scalability when supporting multiple tenants and workloads. To the best of our knowledge, this is the first FPGA provisioning framework to be prototyped that achieves a desirable balance between security and scalability in the multi-tenancy setting.},
	language = {en},
	booktitle = {Security, {Privacy}, and {Applied} {Cryptography} {Engineering}},
	publisher = {Springer International Publishing},
	author = {Bag, Arnab and Patranabis, Sikhar and Roy, Debapriya Basu and Mukhopadhyay, Debdeep},
	editor = {Batina, Lejla and Picek, Stjepan and Mondal, Mainack},
	year = {2020},
	keywords = {Security, FPGAs, Cloud computing, Multi-tenant, Provisioning},
	pages = {208--225},
	file = {Springer Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\HC8W3NQC\\Bag et al. - 2020 - Cryptographically Secure Multi-tenant Provisioning.pdf:application/pdf},
}

@inproceedings{chen_enabling_2014,
	address = {New York, NY, USA},
	series = {{CF} '14},
	title = {Enabling {FPGAs} in the cloud},
	isbn = {978-1-4503-2870-8},
	url = {https://doi.org/10.1145/2597917.2597929},
	doi = {10.1145/2597917.2597929},
	abstract = {Cloud computing is becoming a major trend for delivering and accessing infrastructure on demand via the network. Meanwhile, the usage of FPGAs (Field Programmable Gate Arrays) for computation acceleration has made significant inroads into multiple application domains due to their ability to achieve high throughput and predictable latency, while providing programmability, low power consumption and time-to-value. Many types of workloads, e.g. databases, big data analytics, and high performance computing, can be and have been accelerated by FPGAs. As more and more workloads are being deployed in the cloud, it is appropriate to consider how to make FPGAs and their capabilities available in the cloud. However, such integration is non-trivial due to issues related to FPGA resource abstraction and sharing, compatibility with applications and accelerator logics, and security, among others. In this paper, a general framework for integrating FPGAs into the cloud is proposed and a prototype of the framework is implemented based on OpenStack, Linux-KVM and Xilinx FPGAs. The prototype enables isolation between multiple processes in multiple VMs, precise quantitative acceleration resource allocation, and priority-based workload scheduling. Experimental results demonstrate the effectiveness of this prototype, an acceptable overhead, and good scalability when hosting multiple VMs and processes.},
	urldate = {2021-09-20},
	booktitle = {Proceedings of the 11th {ACM} {Conference} on {Computing} {Frontiers}},
	publisher = {Association for Computing Machinery},
	author = {Chen, Fei and Shan, Yi and Zhang, Yu and Wang, Yu and Franke, Hubertus and Chang, Xiaotao and Wang, Kun},
	month = may,
	year = {2014},
	keywords = {cloud, FPGA virtualization, reconfiguration and heterogeneous computing},
	pages = {1--10},
	file = {Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\AAUBS7YJ\\Chen et al. - 2014 - Enabling FPGAs in the cloud.pdf:application/pdf},
}

@inproceedings{bulens_implementation_2008,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Implementation of the {AES}-128 on {Virtex}-5 {FPGAs}},
	isbn = {978-3-540-68164-9},
	doi = {10.1007/978-3-540-68164-9_2},
	abstract = {This paper presents an updated implementation of the Advanced Encryption Standard (AES) on the recent Xilinx Virtex-5 FPGAs. We show how a modified slice structure in these reconfigurable hardware devices results in significant improvement of the design efficiency. In particular, a single substitution box of the AES can fit in 8 FPGA slices. We combine these technological changes with a sound intertwining of the round and key round functionalities in order to produce encryption and decryption architectures that perfectly fit with the Digital Cinema Initiative specifications. More generally, our implementations are convenient for any application requiring Gbps-range throughput.},
	language = {en},
	booktitle = {Progress in {Cryptology} – {AFRICACRYPT} 2008},
	publisher = {Springer},
	author = {Bulens, Philippe and Standaert, François-Xavier and Quisquater, Jean-Jacques and Pellegrin, Pascal and Rouvroy, Gaël},
	editor = {Vaudenay, Serge},
	year = {2008},
	keywords = {Advance Encryption Standard Algorithm, Block Cipher, Datapath Width, Decryption Architecture, FPGA Implementation},
	pages = {16--26},
	file = {Springer Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\V5Q22T6U\\Bulens et al. - 2008 - Implementation of the AES-128 on Virtex-5 FPGAs.pdf:application/pdf},
}

@techreport{tsang_aes_2018,
	title = {{AES} {File} {Encryption} and {Decryption}},
	language = {en},
	institution = {Simon Fraser University},
	author = {Tsang, Jason and Dixon, Daniel},
	year = {2018},
	pages = {16},
	file = {Tsang and Dixon - AES File Encryption and Decryption.pdf:C\:\\Users\\sgdon\\Zotero\\storage\\Q4FDK5AW\\Tsang and Dixon - AES File Encryption and Decryption.pdf:application/pdf},
}

@misc{noauthor_using_2021,
	title = {Using {Encryption} and {Authentication} to {Secure} an {UltraScale}/{UltraScale}+ {FPGA}  {Bitstream}},
	shorttitle = {{XAPP1267}},
	url = {https://www.xilinx.com/support/documentation/application_notes/xapp1267-encryp-efuse-program.pdf},
	abstract = {This application note describes a simple step-by-step process to generate an encrypted 
bitstream and encryption keys (both AES-GCM and RSA authentication) using the Xilinx® 
Vivado® Design Suite. Steps to program the AES-GSM encryption key and the hash of the RSA 
public key, along with the encrypted bitstream into a Xilinx UltraScale™ FPGA using the Vivado 
Design Suite are also included. This application note applies to both UltraScale and 
UltraScale+™ FPGAs.},
	urldate = {2021-10-04},
	publisher = {Xilinx},
	month = mar,
	year = {2021},
	file = {xapp1267-encryp-efuse-program.pdf:C\:\\Users\\sgdon\\Zotero\\storage\\7CGRWAL4\\xapp1267-encryp-efuse-program.pdf:application/pdf},
}

@inproceedings{byma_fpgas_2014,
	title = {{FPGAs} in the {Cloud}: {Booting} {Virtualized} {Hardware} {Accelerators} with {OpenStack}},
	shorttitle = {{FPGAs} in the {Cloud}},
	doi = {10.1109/FCCM.2014.42},
	abstract = {We present a new approach for integrating virtualized FPGA-based hardware accelerators into commercial-scale cloud computing systems, with minimal virtualization overhead. Partially reconfigurable regions across multiple FPGAs are offered as generic cloud resources through OpenStack (opensource cloud software), thereby allowing users to “boot” custom designed or predefined network-connected hardware accelerators with the same commands they would use to boot a regular Virtual Machine. We propose a hardware and software framework to enable this virtualization. This is a first attempt at closely fitting FPGAs into existing cloud computing models, where resources are virtualized, flexible, and have the illusion of infinite scalability. Our system can set up and tear down virtual accelerators in approximately 2.6 seconds on average, much faster than regular virtual machines. The static virtualization hardware on the physical FPGAs causes only a three cycle latency increase and a one cycle pipeline stall per packet in accelerators when compared to a non-virtualized system. We present a case study analyzing the design and performance of an application-level load balancer using a fully implemented prototype of our system. Our study shows that FPGA cloud compute resources can easily outperform virtual machines, while the system's virtualization and abstraction significantly reduces design iteration time and design complexity.},
	booktitle = {2014 {IEEE} 22nd {Annual} {International} {Symposium} on {Field}-{Programmable} {Custom} {Computing} {Machines}},
	author = {Byma, Stuart and Steffan, J. Gregory and Bannazadeh, Hadi and Leon-Garcia, Alberto and Chow, Paul},
	month = may,
	year = {2014},
	keywords = {Hardware, Registers, Field programmable gate arrays, Virtual machine monitors, Cloud computing, Virtualization, Cloud Computing, Partial Reconfiguration},
	pages = {109--116},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\ECBPRX4C\\6861604.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\43II6TLE\\Byma et al. - 2014 - FPGAs in the Cloud Booting Virtualized Hardware A.pdf:application/pdf},
}

@article{tarafdar_designing_2018,
	title = {Designing for {FPGAs} in the {Cloud}},
	volume = {35},
	issn = {2168-2356, 2168-2364},
	url = {http://ieeexplore.ieee.org/document/8030335/},
	doi = {10.1109/MDAT.2017.2748393},
	language = {en},
	number = {1},
	urldate = {2022-03-23},
	journal = {IEEE Design \& Test},
	author = {Tarafdar, Naif and Eskandari, Nariman and Lin, Thomas and Chow, Paul},
	month = feb,
	year = {2018},
	pages = {23--29},
	file = {Tarafdar et al. - 2018 - Designing for FPGAs in the Cloud.pdf:C\:\\Users\\sgdon\\Zotero\\storage\\HHMIVZG8\\Tarafdar et al. - 2018 - Designing for FPGAs in the Cloud.pdf:application/pdf},
}

@article{abeni_edf_2020,
	title = {{EDF} scheduling of real-time tasks on multiple cores: adaptive partitioning vs. global scheduling},
	volume = {20},
	issn = {1559-6915},
	shorttitle = {{EDF} scheduling of real-time tasks on multiple cores},
	url = {https://doi.org/10.1145/3412816.3412817},
	doi = {10.1145/3412816.3412817},
	abstract = {This paper presents a novel migration algorithm for real-time tasks on multicore systems, based on the idea of migrating tasks only when strictly needed to respect their temporal constraints and a combination of this new algorithm with EDF scheduling. This new "adaptive migration" algorithm is evaluated through an extensive set of simulations showing good performance when compared with global or partitioned EDF: our results highlight that it provides a worst-case utilisation bound similar to partitioned EDF for hard real-time tasks and an empirical tardiness bound (like global EDF) for soft real-time tasks. Therefore, the proposed scheduler is effective for dealing with both hard and soft real-time workloads.},
	number = {2},
	urldate = {2022-03-28},
	journal = {ACM SIGAPP Applied Computing Review},
	author = {Abeni, Luca and Cucinotta, Tommaso},
	month = jul,
	year = {2020},
	keywords = {multi-core real-time scheduling, real-time operating systems},
	pages = {5--18},
	file = {Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\BWHWE7NR\\Abeni and Cucinotta - 2020 - EDF scheduling of real-time tasks on multiple core.pdf:application/pdf},
}

@article{liu_scheduling_1973,
	title = {Scheduling {Algorithms} for {Multiprogramming} in a {Hard}-{Real}-{Time} {Environment}},
	volume = {20},
	issn = {0004-5411},
	url = {https://doi.org/10.1145/321738.321743},
	doi = {10.1145/321738.321743},
	abstract = {The problem of multiprogram scheduling on a single processor is studied from the viewpoint of the characteristics peculiar to the program functions that need guaranteed service. It is shown that an optimum fixed priority scheduler possesses an upper bound to processor utilization which may be as low as 70 percent for large task sets. It is also shown that full processor utilization can be achieved by dynamically assigning priorities on the basis of their current deadlines. A combination of these two scheduling techniques is also discussed.},
	number = {1},
	urldate = {2022-03-28},
	journal = {Journal of the ACM},
	author = {Liu, C. L. and Layland, James W.},
	month = jan,
	year = {1973},
	pages = {46--61},
	file = {Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\8NYFAEWF\\Liu and Layland - 1973 - Scheduling Algorithms for Multiprogramming in a Ha.pdf:application/pdf},
}

@misc{noauthor_zynq_nodate,
	title = {Zynq {UltraScale}+ {MPSoC}},
	url = {https://www.xilinx.com/products/silicon-devices/soc/zynq-ultrascale-mpsoc.html},
	abstract = {Based on the Xilinx UltraScale MPSoC architecture, the Zynq UltraScale+ MPSoCs enable extensive system level differentiation, integration, and flexibility through hardware, software, and I/O programmability.},
	language = {en},
	urldate = {2022-03-28},
	journal = {Xilinx},
	file = {Snapshot:C\:\\Users\\sgdon\\Zotero\\storage\\ATT99M2G\\zynq-ultrascale-mpsoc.html:text/html},
}

@misc{noauthor_amazon_nodate,
	title = {Amazon {EC2} {F1} {Instances}},
	url = {https://aws.amazon.com/ec2/instance-types/f1/},
	abstract = {Low-cost, burstable general purpose Amazon EC2 instances},
	language = {en-US},
	urldate = {2022-03-30},
	journal = {Amazon Web Services, Inc.},
}

@misc{noauthor_alveo_nodate,
	title = {Alveo for {Microsoft} {Azure}},
	url = {https://www.xilinx.com/products/boards-and-kits/alveo/cloud-solutions/microsoft-azure.html},
	abstract = {MSFT Azure uses Alveo™ U250 to enable FPGA as a Service (FaaS) to deliver seamless migration of applications between on-premise and cloud.},
	language = {en},
	urldate = {2022-03-30},
	journal = {Xilinx},
	file = {Snapshot:C\:\\Users\\sgdon\\Zotero\\storage\\WH27XY4P\\microsoft-azure.html:text/html},
}

@misc{noauthor_deep_nodate,
	title = {Deep {Dive} into {Alibaba} {Cloud} {F3} {FPGA} as a {Service} {Instances} - {Alibaba} {Cloud} {Community}},
	url = {https://www.alibabacloud.com/blog/deep-dive-into-alibaba-cloud-f3-fpga-as-a-service-instances_594057},
	urldate = {2022-03-30},
	file = {Deep Dive into Alibaba Cloud F3 FPGA as a Service Instances - Alibaba Cloud Community:C\:\\Users\\sgdon\\Zotero\\storage\\VNIR9IJH\\deep-dive-into-alibaba-cloud-f3-fpga-as-a-service-instances_594057.html:text/html},
}

@article{funk_edf_nodate,
	title = {{EDF} {Scheduling} on {Heterogeneous} {Multiprocessors}},
	language = {en},
	author = {Funk, Shelby Hyatt},
	pages = {140},
	file = {Funk - EDF Scheduling on Heterogeneous Multiprocessors.pdf:C\:\\Users\\sgdon\\Zotero\\storage\\6IXV3YK6\\Funk - EDF Scheduling on Heterogeneous Multiprocessors.pdf:application/pdf},
}

@article{davis_review_2014,
	title = {A review of fixed priority and {EDF} scheduling for hard real-time uniprocessor systems},
	volume = {11},
	issn = {1551-3688},
	url = {https://dl.acm.org/doi/10.1145/2597457.2597458},
	doi = {10.1145/2597457.2597458},
	abstract = {This paper was written to accompany a talk at the ETR Summer School in Toulouse 2013. It provides a background and primer to scheduling and schedulability analysis for hard real-time single processor systems. The paper focuses on the two main scheduling algorithms used: Fixed Priority and Earliest Deadline First. The paper has two broad aims: Firstly to provide a guide to the fundamental results for these realtime scheduling algorithms. Secondly to provide a brief review of extensions aimed at (i) limiting the effects and overheads of pre-emption and (ii) accounting for the effects of preemptions; specifically cache related pre-emption delays. The paper also briefly looks back at success stories in real-time scheduling, and forwards at the current hot topics in this research area.},
	language = {en},
	number = {1},
	urldate = {2022-03-30},
	journal = {ACM SIGBED Review},
	author = {Davis, Robert I.},
	month = feb,
	year = {2014},
	pages = {8--19},
	file = {Davis - 2014 - A review of fixed priority and EDF scheduling for .pdf:C\:\\Users\\sgdon\\Zotero\\storage\\3ZHEU4SV\\Davis - 2014 - A review of fixed priority and EDF scheduling for .pdf:application/pdf},
}

@book{stankovic_deadline_1998,
	title = {Deadline {Scheduling} for {Real}-{Time} {Systems}: {EDF} and {Related} {Algorithms}},
	isbn = {978-0-7923-8269-0},
	shorttitle = {Deadline {Scheduling} for {Real}-{Time} {Systems}},
	abstract = {Many real-time systems rely on static scheduling algorithms. This includes cyclic scheduling, rate monotonic scheduling and fixed schedules created by off-line scheduling techniques such as dynamic programming, heuristic search, and simulated annealing. However, for many real-time systems, static scheduling algorithms are quite restrictive and inflexible. For example, highly automated agile manufacturing, command, control and communications, and distributed real-time multimedia applications all operate over long lifetimes and in highly non-deterministic environments. Dynamic real-time scheduling algorithms are more appropriate for these systems and are used in such systems. Many of these algorithms are based on earliest deadline first (EDF) policies. There exists a wealth of literature on EDF-based scheduling with many extensions to deal with sophisticated issues such as precedence constraints, resource requirements, system overload, multi-processors, and distributed systems.  Deadline Scheduling for Real-Time Systems: EDF and Related Algorithms aims at collecting a significant body of knowledge on EDF scheduling for real-time systems, but it does not try to be all-inclusive (the literature is too extensive). The book primarily presents the algorithms and associated analysis, but guidelines, rules, and implementation considerations are also discussed, especially for the more complicated situations where mathematical analysis is difficult.  In general, it is very difficult to codify and taxonomize scheduling knowledge because there are many performance metrics, task characteristics, and system configurations. Also, adding to the complexity is the fact that a variety of algorithms have been designed for different combinations of these considerations. In spite of the recent advances there are still gaps in the solution space and there is a need to integrate the available solutions. For example, a list of issues to consider includes:  preemptive versus non-preemptive tasks,  uni-processors versus multi-processors,  using EDF at dispatch time versus EDF-based planning,  precedence constraints among tasks,  resource constraints,  periodic versus aperiodic versus sporadic tasks,  scheduling during overload,  fault tolerance requirements, and  providing guarantees and levels of guarantees (meeting quality of service requirements).    Deadline Scheduling for Real-Time Systems: EDF and Related Algorithms should be of interest to researchers, real-time system designers, and instructors and students, either as a focussed course on deadline-based scheduling for real-time systems, or, more likely, as part of a more general course on real-time computing. The book serves as an invaluable reference in this fast-moving field.},
	language = {en},
	publisher = {Springer Science \& Business Media},
	author = {Stankovic, John A. and Spuri, Marco and Ramamritham, Krithi and Buttazzo, Giorgio},
	month = oct,
	year = {1998},
	note = {Google-Books-ID: 6WTbRS6\_6Z4C},
	keywords = {Computers / Computer Science, Computers / Expert Systems, Computers / Information Technology, Computers / Networking / Hardware, Computers / Systems Architecture / General},
}

@inproceedings{spuri_efficient_1994,
	title = {Efficient aperiodic service under earliest deadline scheduling},
	doi = {10.1109/REAL.1994.342735},
	abstract = {We present four new on-line algorithms for servicing soft aperiodic requests in real-time systems, where a set of hard periodic tasks is scheduled using the Earliest Deadline First (EDF) algorithm. All the proposed solutions can achieve full processor utilization and enhance aperiodic responsiveness, still guaranteeing the execution of the periodic tasks. Operation of the algorithms, performance, schedulability analysis, and implementation complexity are discussed and compared with classical alternative solutions, such as background and polling service. Extensive simulations show that algorithms with contained run-time overhead present nearly optimal responsiveness. A valuable contribution of this work is to provide the real-time system designer with a wide range of practical solutions which allow to balance efficiency against implementation complexity.{\textless}{\textgreater}},
	booktitle = {1994 {Proceedings} {Real}-{Time} {Systems} {Symposium}},
	author = {{Spuri} and {Buttazzo}},
	month = dec,
	year = {1994},
	keywords = {Real time systems},
	pages = {2--11},
	file = {10.1.1.124.8795.pdf:C\:\\Users\\sgdon\\Zotero\\storage\\VXW45SWW\\10.1.1.124.8795.pdf:application/pdf;IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\5AU8M64N\\342735.html:text/html;Submitted Version:C\:\\Users\\sgdon\\Zotero\\storage\\NYURL5SI\\Spuri and Buttazzo - 1994 - Efficient aperiodic service under earliest deadlin.pdf:application/pdf},
}

@misc{noauthor_memory_2021,
	title = {Memory and {Peripheral} {Protection} {Unit} for {PL} {Isolation} in {Zynq} {UltraScale}+ {Devices}},
	publisher = {Xilinx},
	year = {2021},
	file = {Memory and Peripheral Protection Unit for PL Isolation in Zynq UltraScale+ Devices:C\:\\Users\\sgdon\\Zotero\\storage\\JLB2MAHT\\xapp1353-pl-isolation(2).pdf:application/pdf},
}

@article{chu_key-aggregate_2014,
	title = {Key-{Aggregate} {Cryptosystem} for {Scalable} {Data} {Sharing} in {Cloud} {Storage}},
	volume = {25},
	issn = {1558-2183},
	doi = {10.1109/TPDS.2013.112},
	abstract = {Data sharing is an important functionality in cloud storage. In this paper, we show how to securely, efficiently, and flexibly share data with others in cloud storage. We describe new public-key cryptosystems that produce constant-size ciphertexts such that efficient delegation of decryption rights for any set of ciphertexts are possible. The novelty is that one can aggregate any set of secret keys and make them as compact as a single key, but encompassing the power of all the keys being aggregated. In other words, the secret key holder can release a constant-size aggregate key for flexible choices of ciphertext set in cloud storage, but the other encrypted files outside the set remain confidential. This compact aggregate key can be conveniently sent to others or be stored in a smart card with very limited secure storage. We provide formal security analysis of our schemes in the standard model. We also describe other application of our schemes. In particular, our schemes give the first public-key patient-controlled encryption for flexible hierarchy, which was yet to be known.},
	number = {2},
	journal = {IEEE Transactions on Parallel and Distributed Systems},
	author = {Chu, Cheng-Kang and Chow, Sherman S.M. and Tzeng, Wen-Guey and Zhou, Jianying and Deng, Robert H.},
	month = feb,
	year = {2014},
	note = {Conference Name: IEEE Transactions on Parallel and Distributed Systems},
	keywords = {Encryption, Servers, Cloud computing, Aggregates, Cloud storage, data sharing, key-aggregate encryption, patient-controlled encryption, Public key},
	pages = {468--477},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgdon\\Zotero\\storage\\VP4FL38Z\\references.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\sgdon\\Zotero\\storage\\U579XHD8\\Chu et al. - 2014 - Key-Aggregate Cryptosystem for Scalable Data Shari.pdf:application/pdf},
}

@misc{noauthor_zedboard_nodate,
	title = {{ZedBoard} {\textbar} {Avnet} {Boards}},
	url = {https://www.avnet.com/wps/portal/us/products/avnet-boards/avnet-board-families/zedboard/},
	abstract = {ZedBoard™ is a complete development kit for designers interested in exploring designs using the Xilinx Zynq®-7000 All Programmable SoC.},
	language = {en},
	urldate = {2022-04-06},
	file = {Snapshot:C\:\\Users\\sgdon\\Zotero\\storage\\Y8MAHWUN\\zedboard.html:text/html},
}

@misc{mcneil_isolation_2021,
	title = {Isolation {Methods} in {Zynq} {UltraScale}+ {MPSoCs}},
	abstract = {The Zynq® UltraScale+™ MPSoC provides multiple processing subsytems including an application processing unit containing four Cortex™-A53 cores (APU subsystem), two Cortex-R5 cores (RPU subsytem), a platform management unit (PMU), as well as a configuration security unit (CSU). A user-specified number of MicroBlaze™ processors could also be located in the programmable logic (PL). When multiple software teams are involved in system development, these processing units can potentially interfere with each other. In order to prevent the possibility of such interference, isolation is necessary. Due to the nature of security and functional safety applications, isolation is a requirement.},
	language = {en},
	author = {McNeil, Steven and Schillinger, Peter and Kolarkar, Aniket and Puillet, Emmanuel and Gertheinrich, Uwe},
	year = {2021},
	pages = {56},
	file = {McNeil et al. - 2021 - Isolation Methods in Zynq UltraScale+ MPSoCs.pdf:C\:\\Users\\sgdon\\Zotero\\storage\\N9VRC6N4\\McNeil et al. - 2021 - Isolation Methods in Zynq UltraScale+ MPSoCs.pdf:application/pdf},
}

@misc{noauthor_axu2cgb_nodate,
	title = {[{AXU2CGB}] {Xilinx} {Zynq} {UltraScale}+ {MPSoC} {XCZU2CG} {FPGA} {Development} {Board} - {MPSoC} - {ALINX} {Electronics} {Technology} ({Shanghai}) {Co}., {Ltd}.},
	url = {http://www.alinx.com/en/index.php/default/content/102.html},
	urldate = {2022-04-06},
	file = {[AXU2CGB] Xilinx Zynq UltraScale+ MPSoC XCZU2CG FPGA Development Board - MPSoC - ALINX Electronics Technology (Shanghai) Co., Ltd.:C\:\\Users\\sgdon\\Zotero\\storage\\JVWY4C8U\\102.html:text/html},
}

@misc{noauthor_os_2020,
	title = {{OS} and {Libraries} {Document} {Collection}({UG643})},
	abstract = {Chapter 2: Xilinx Standard C Libraries Describes the software libraries available for the embedded processors.},
	language = {en},
	year = {2020},
	pages = {322},
	file = {2020 - OS and Libraries Document Collection(UG643).pdf:C\:\\Users\\sgdon\\Zotero\\storage\\38D8W59H\\2020 - OS and Libraries Document Collection(UG643).pdf:application/pdf},
}

@misc{xilinx_using_nodate,
	type = {reference},
	title = {Using {JTAG} {UART}},
	url = {https://www.xilinx.com/htmldocs/xilinx2018_1/SDK_Doc/xsct/use_cases/xsdb_using_jtag_uart.html},
	abstract = {Xilinx® System Debugger Command-line Interface (XSDB) supports virtual UART through Jtag, which is useful when the physical Uart doesn't exist or is non-functional. To use Jtag UART, the SW ...},
	language = {en-us},
	urldate = {2022-04-15},
	author = {Xilinx},
	file = {Snapshot:C\:\\Users\\sgdon\\Zotero\\storage\\ZCSLAQTX\\xsdb_using_jtag_uart.html:text/html},
}
